The following capture shows the installation of M-Unit (MASH*1.5*0) and the 
results of unit tests in non-verbose mode [starting at D ^%utt1] and verbose 
mode with high resolution timing [starting at D EN^%ut("%utt1",3)] as well as 
coverage analysis [starting at D ^%uttcovr] in a Cache system with VistA 
support installed.


The commands used are:
   D ^XUP    - Entry into the EVE menu to install the patch
   
   D ^%utt1  - this runs the unit tests in non-verbose mode, showing periods 
               for each passing test.  Note that due to simply showing a '.' 
               for successful tests instead of listing every test run, the 
               non-verbose listing is much more compact and highlights any 
               problems that are encountered.

   D EN^%ut("%utt1",3) - runs unit tests with VERBOSITY	set to 3, this 
               causes each test to be listed with its result and at level 
               3 it lists execution time for each test in fractional 
               milliseconds
               
   D ^%uttcovr - runs detailed coverage analysis for the unit test routines 
               with level set to 3, which lists coverage by routine, 
               coverage by tag within routines, and within each routine lists 
               by tag lines that were NOT covered.  The routine %uttcovr runs 
               the tests and routines in multiple ways to cover all of the 
               different ways that the tests can be run and to cover as well 
               as possible all of the paths in the code being tested.


D ^XUP

Setting up programmer environment
This is a TEST account.

Terminal Type set to: C-VT100

Select OPTION NAME: EVE
     1   EVE       Systems Manager Menu
     2   EVENT CAPTURE  ECX ECS MAINTENANCE     Event Capture
     3   EVENT CAPTURE (ECS) EXTRACT AU  ECX ECS SOURCE AUDIT     Event Capture 
(ECS) Extract Audit
     4   EVENT CAPTURE DATA ENTRY  ECENTER     Event Capture Data Entry
     5   EVENT CAPTURE EXTRACT  ECXEC     Event Capture Extract
Press <RETURN> to see more, '^' to exit this list, OR
CHOOSE 1-5: 1  EVE     Systems Manager Menu

Select Systems Manager Menu <TEST ACCOUNT> Option: PROGrammer Options

Select Programmer Options <TEST ACCOUNT> Option: KIDS  Kernel Installation & Dis
tribution System

Select Kernel Installation & Distribution System <TEST ACCOUNT> Option: INStalla
tion

Select Installation <TEST ACCOUNT> Option: LOAD a Distribution
Enter a Host File: C:\TEMP\MASH_1.5_9 0.KDI  ID

KIDS Distribution saved on Feb 11, 2017@13:08:44
Comment: Updated M-Unit package

This Distribution contains Transport Globals for the following Package(s):
   MASH*1.5*0
Distribution OK!

Want to Continue with Load? YES// 
Loading Distribution...

   MASH*1.5*0
This Patch is for Version 1.5, you are running Version 1.4

Want to continue installing this build? NO// YES
Use INSTALL NAME: MASH*1.5*0 to install this Distribution.


Select Installation <TEST ACCOUNT> Option: 6  Install Package(s)
Select INSTALL NAME:    MASH*1.5*0     Loaded from Distribution    2/12/17@14:32
:41
     => Updated M-Unit package  ;Created on Feb 11, 2017@13:08:44

This Distribution was loaded on Feb 12, 2017@14:32:41 with header of 
   Updated M-Unit package  ;Created on Feb 11, 2017@13:08:44
   It consisted of the following Install(s):
     MASH*1.5*0
Checking Install for Package MASH*1.5*0
This Patch is for Version 1.5, you are running Version 1.4

Want to continue installing this build? NO// YES

Install Questions for MASH*1.5*0

Incoming Files:


   17.9001   M-UNIT TEST GROUP  (including data)
Note:  You already have the 'M-UNIT TEST GROUP' File.
I will MERGE your data with mine.

Want KIDS to Rebuild Menu Trees Upon Completion of Install? NO// 


Want KIDS to INHIBIT LOGONs during the install? NO// 
Want to DISABLE Scheduled Options, Menu Options, and Protocols? NO// 

Enter the Device you want to print the Install messages.
You can queue the install by enter a 'Q' at the device prompt.
Enter a '^' to abort the install.

DEVICE: HOME//   Console (Cache' on Windows)
 
 Install Started for MASH*1.5*0 : 
               Feb 12, 2017@14:33:27
 
Build Distribution Date: Feb 11, 2017
 
 Installing Routines:
 
 Running Pre-Install Routine: ^ZZUTPRE
 
 Installing Data Dictionaries: 
               Feb 12, 2017@14:33:28
 
 Installing Data: 
               Feb 12, 2017@14:33:28
 
 Installing PACKAGE COMPONENTS: 
 
 Installing REMOTE PROCEDURE
 
 Installing OPTION
               Feb 12, 2017@14:33:28
 
 Running Post-Install Routine: ^ZZUTPOST
Routine:       ut Loaded, Saved as      %ut
Routine:      ut1 Loaded, Saved as     %ut1
Routine:  utcover Loaded, Saved as %utcover
Routine:     utt1 Loaded, Saved as    %utt1
Routine:     utt2 Loaded, Saved as    %utt2
Routine:     utt3 Loaded, Saved as    %utt3
Routine:     utt4 Loaded, Saved as    %utt4
Routine:     utt5 Loaded, Saved as    %utt5
Routine:     utt6 Loaded, Saved as    %utt6
Routine:  uttcovr Loaded, Saved as %uttcovr
 
 Updating Routine file...
 
 Updating KIDS files...
 
 MASH*1.5*0 Installed. 
               Feb 12, 2017@14:33:28
 
 NO Install Message sent 

Install Completed


Select Installation <TEST ACCOUNT> Option: ^PG   Programmer mode

VISTA>



VISTA>D ^%utt1

Running tests in NON-VERBOSE mode
For Verbose mode use DO VERBOSE^%utt1(ARG) where ARG is an integer 1 to 3
ENTER RETURN TO CONTINUE: ....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.
VISTA>

VISTA>

VISTA>D EN^%ut("%utt1",3)


----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.------------------------------------  [OK] .1ms
T2 - - Make sure Set-up runs.-----------------------------------  [OK] .066ms
T3 - - Make sure Teardown runs.----------------------------------  [OK] .06ms
T4 - Entry point using XTMENT.----------------------------------  [OK] .064ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.---------------------------------------------------------------  [FAIL] .139ms
T6 - Succeed Entry Point...-------------------------------------  [OK] .072ms
T7 - Make sure we write to principal even though we are on another device..[OK] 
14.966ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.---------------------------------------------------  [OK] 15.062ms
COVRPTGL - coverage report returning global....----------------  [OK] 1.272ms

----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.[OK]
 .038ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.--------------------------------------------------------------  [OK] .05ms

----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations-----------------------------  [OK] .034ms

----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.-----  [OK] .036ms
OLDSTYLE -  identify old style test indicator functionality..---  [OK] .033ms
OLDSTYL1 -  identify old style test indicator 2.----------------  [OK] .025ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
----------------------------------------------------------------  [FAIL] .067ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
----------------------------------------------------------------  [FAIL] .069ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q
----------------------------------------------------------------  [FAIL] .282ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
----------------------------------------------------------------  [FAIL] .075ms
LEAKSOK - check leaks should be ok------------------------------  [OK] .205ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
----------------------------------------------------------------  [FAIL] .274ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
----------------------------------------------------------------  [FAIL] .077ms
ISUTEST - check ISUTEST inside unit test.-----------------------  [OK] .055ms

----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......[OK] .182ms
CHKCMDLN - check command line processing of %utt5---------------  [OK] .034ms
CHKGUI - check GUI processing of %utt5--------------------------  [OK] .033ms
CKGUISET - check list of tests returned by GUISET---------------  [OK] .035ms
NEWSTYLE - test return of valid new style or @TEST indicators... [OK] 1.297ms

---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...---------------------------------  [OK] .928ms
COVCOV - - check COVCOV - remove seen lines......---------------  [OK] .433ms
COVRPT...........----------------------------------------------  [OK] 4.379ms
COVRPTLS - - coverage report returning text in global........... [OK] 3.826ms
TRIMDATA - - TRIMDATA in %utcover..-----------------------------  [OK] .099ms
LIST - - LIST in %utcover............---------------------------  [OK] .692ms
CACHECOV - - set up routine for analysis in globals..----------  [OK] 6.947ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............------------------------------------------  [OK] .168ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........---------------------  [OK] .53ms

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.
VISTA>

VISTA>

VISTA>D ^%uttcovr

Loading routines to test coverage...


------------------- RUNNING %uttcovr -------------------
......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ENTRY^%uttcovr -------------------

LEAKSBAD TEST - X NOT SPECIFIED VARIABLE LEAK: X
xxxxxxxxxxxxxxxxxxxx GOING TO COV^%ut FOR %utt5 at 3



Loading routines to test coverage...
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.
xxxxxxxxxxxxxxxxxxxx GOING TO COV^%ut FOR %utt5 at -1



Loading routines to test coverage...
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.
xxxxxxxxxxxxxxxxxxxx GOING TO MULTAPIS for %utt4 and %ut




------------------- RUNNING ^%ut -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%utt4 -------------------


----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations------------------------------------  [OK]

Ran 1 Routine, 1 Entry Tag
Checked 0 test, with 0 failures and encountered 0 errors.


------------ SUMMARY ------------
Ran 2 Routines, 6 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
xxxxxxxxxxxxxxxxxxxx GOING TO COVERAGE for %utt4 and %ut at 3



Loading routines to test coverage...


------------------- RUNNING ^%ut -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%utt4 -------------------


----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations------------------------------------  [OK]

Ran 1 Routine, 1 Entry Tag
Checked 0 test, with 0 failures and encountered 0 errors.


------------ SUMMARY ------------
Ran 2 Routines, 6 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.


Routine %ut             (95.10%)   272 out of 286 lines covered
  - Detailed Breakdown
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut               (93.85%)   61 out of 65 lines covered
   the following is a list of the lines **NOT** covered
     EN1+72   . . . I $$GETSYS()=0 S %utStart=$P($NOW(),",",2)
     EN1+73   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utStart=$s(V>6.2:$ZH,1:
0)
     EN1+84   . . . I $$GETSYS()=0 S %utEnd=$P($NOW(),",",2) S %utElapsed=(%utEn
d-%utStart)*1000,%utElapsed=%utElapsed_"ms"
     EN1+85   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utEnd=$s(V>6.2:$ZH,1:0)
 S %utElapsed=$$ZHDIF(%utStart,%utEnd)
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered
   the following is a list of the lines **NOT** covered
     ZHDIF+1   N SC0 S SC0=$P(%ZH0,",",2)
     ZHDIF+2   N SC1 S SC1=$P(%ZH1,",",2)
     ZHDIF+3   N DC0 S DC0=$P(%ZH0,",")*86400
     ZHDIF+4   N DC1 S DC1=$P(%ZH1,",")*86400
     ZHDIF+5   N MCS0 S MCS0=$P(%ZH0,",",3)/1000000
     ZHDIF+6   N MCS1 S MCS1=$P(%ZH1,",",3)/1000000
     ZHDIF+8   N T0 S T0=SC0+DC0+MCS0
     ZHDIF+9   N T1 S T1=SC1+DC1+MCS1
     ZHDIF+11   N %ZH2 S %ZH2=T1-T0*1000
     ZHDIF+12   QUIT %ZH2_"ms"


Routine %ut1            (86.25%)   232 out of 269 lines covered
  - Detailed Breakdown
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
   the following is a list of the lines **NOT** covered
     CACHECOV+17   . . N % S %N=0 F XCNP=XCNP+1:1 S %N=%N+1,%=$T(+%N^@X) Q:$L(%)
=0  S @(DIF_XCNP_",0)")=%
     CACHECOV+18   . . Q
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
   the following is a list of the lines **NOT** covered
     COV+18   . N NMSP S NMSP=$G(NMSPS)
     COV+19   . D:NMSP]""  S NMSP="" F  S NMSP=$O(NMSPS(NMSP)) Q:NMSP=""  D
     COV+20   .. N %ZR ; GT.M specific
     COV+21   .. D SILENT^%RSEL(NMSP,"SRC") ; GT.M specific. On Cache use $O(^$R
(RTN)).
     COV+22   .. N RN S RN=""
     COV+23   .. F  S RN=$O(%ZR(RN)) Q:RN=""  W RN," " D
     COV+24   ... N L2 S L2=$T(+2^@RN)
     COV+26   . . . S L2=$TR(L2,$C(9)," ") ; change tabs to spaces ; JLI 160316 
inserted to replace above
     COV+29   . . . I $E($P(L2," ",2),1,2)'=";;" K %ZR(RN) W !,"Routine "_RN_" r
emoved from analysis, since it doesn't have the standard second line",! ; JLI 16
0316 inserted to replace above
     COV+30   .. M RTNS=%ZR
     COV+31   .. K %ZR
     COV+32   . Q
     COV+36   . D:NMSP]""  S NMSP="" F  S NMSP=$O(NMSPS(NMSP)) Q:NMSP=""  D
     COV+52   . K ^TMP("%utCOVCOHORTSAV",$J)
     COV+53   . M ^TMP("%utCOVCOHORTSAV",$J)=^TMP("%utCOVCOHORT",$J)
     COV+54   . K ^TMP("%utCOVRESULT",$J)
     COV+55   . S ^TMP("%utcovrunning",$J)=1,%utcovxx=1
     COV+57   . I ($$GETSYS^%ut()=47) VIEW "TRACE":1:$NA(^TMP("%utCOVRESULT",$J)
)  ; GT.M START PROFILING
     COV+59   . I ($$GETSYS^%ut()=0) D  ; CACHE CODE TO START PROFILING
     COV+60   . . N NMSP,NMSPV S NMSP="",NMSPV="" F  S NMSPV=$O(RTNS(NMSPV)) Q:N
MSPV=""  S NMSP=NMSP_NMSPV_","
     COV+61   . . S NMSP=$E(NMSP,1,$L(NMSP)-1)
     COV+62   . . S STATUS=##class(%Monitor.System.LineByLine).Start($lb(NMSP),$
lb("RtnLine"),$lb($j))
     COV+70   . . SET $ETRAP="Q:($ES&$Q) -9 Q:$ES  W ""CTRL-C ENTERED"""
     COV+71   . . USE $PRINCIPAL:(CTRAP=$C(3))
     COV+72   . . Q
     COV+88   . . D TOTAGS(COVERSAV,0),TOTAGS(COVER,1)
     COV+89   . . D ##class(%Monitor.System.LineByLine).Stop()
     COV+90   . . Q
     COV+91   . D COVCOV($NA(^TMP("%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J
))) ; Venn diagram matching between globals
     COV+93   . I VERBOSITY=-1 D
     COV+94   . . K ^TMP("%utCOVREPORT",$J)
     COV+95   . . D COVRPTGL^%utcover($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("
%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J)),$NA(^TMP("%utCOVREPORT",$J)))
     COV+96   . . Q
     COV+97   . E  D COVRPT($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("%utCOVCOHO
RT",$J)),$NA(^TMP("%utCOVRESULT",$J)),VERBOSITY)
     COV+98   . Q
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1         (100.00%)   11 out of 11 lines covered
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Detailed Breakdown
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut             (95.10%)   272 out of 286 lines covered
  - Summary
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut               (93.85%)   61 out of 65 lines covered
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered


Routine %ut1            (86.25%)   232 out of 269 lines covered
  - Summary
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1         (100.00%)   11 out of 11 lines covered
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Summary
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut      (95.10%)   272 out of 286 lines covered
Routine %ut1      (86.25%)   232 out of 269 lines covered
Routine %utcover     (100.00%)   107 out of 107 lines covered


Overall Analysis 611 out of 662 lines covered (92% coverage)
xxxxxxxxxxxxxxxxxxxx LISTING DATA VIA LIST





Routine %ut             (95.10%)   272 out of 286 lines covered
  - Detailed Breakdown
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut               (93.85%)   61 out of 65 lines covered
   the following is a list of the lines **NOT** covered
     EN1+72   . . . I $$GETSYS()=0 S %utStart=$P($NOW(),",",2)
     EN1+73   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utStart=$s(V>6.2:$ZH,1:
0)
     EN1+84   . . . I $$GETSYS()=0 S %utEnd=$P($NOW(),",",2) S %utElapsed=(%utEn
d-%utStart)*1000,%utElapsed=%utElapsed_"ms"
     EN1+85   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utEnd=$s(V>6.2:$ZH,1:0)
 S %utElapsed=$$ZHDIF(%utStart,%utEnd)
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered
   the following is a list of the lines **NOT** covered
     ZHDIF+1   N SC0 S SC0=$P(%ZH0,",",2)
     ZHDIF+2   N SC1 S SC1=$P(%ZH1,",",2)
     ZHDIF+3   N DC0 S DC0=$P(%ZH0,",")*86400
     ZHDIF+4   N DC1 S DC1=$P(%ZH1,",")*86400
     ZHDIF+5   N MCS0 S MCS0=$P(%ZH0,",",3)/1000000
     ZHDIF+6   N MCS1 S MCS1=$P(%ZH1,",",3)/1000000
     ZHDIF+8   N T0 S T0=SC0+DC0+MCS0
     ZHDIF+9   N T1 S T1=SC1+DC1+MCS1
     ZHDIF+11   N %ZH2 S %ZH2=T1-T0*1000
     ZHDIF+12   QUIT %ZH2_"ms"


Routine %ut1            (86.25%)   232 out of 269 lines covered
  - Detailed Breakdown
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
   the following is a list of the lines **NOT** covered
     CACHECOV+17   . . N % S %N=0 F XCNP=XCNP+1:1 S %N=%N+1,%=$T(+%N^@X) Q:$L(%)
=0  S @(DIF_XCNP_",0)")=%
     CACHECOV+18   . . Q
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
   the following is a list of the lines **NOT** covered
     COV+18   . N NMSP S NMSP=$G(NMSPS)
     COV+19   . D:NMSP]""  S NMSP="" F  S NMSP=$O(NMSPS(NMSP)) Q:NMSP=""  D
     COV+20   .. N %ZR ; GT.M specific
     COV+21   .. D SILENT^%RSEL(NMSP,"SRC") ; GT.M specific. On Cache use $O(^$R
(RTN)).
     COV+22   .. N RN S RN=""
     COV+23   .. F  S RN=$O(%ZR(RN)) Q:RN=""  W RN," " D
     COV+24   ... N L2 S L2=$T(+2^@RN)
     COV+26   . . . S L2=$TR(L2,$C(9)," ") ; change tabs to spaces ; JLI 160316 
inserted to replace above
     COV+29   . . . I $E($P(L2," ",2),1,2)'=";;" K %ZR(RN) W !,"Routine "_RN_" r
emoved from analysis, since it doesn't have the standard second line",! ; JLI 16
0316 inserted to replace above
     COV+30   .. M RTNS=%ZR
     COV+31   .. K %ZR
     COV+32   . Q
     COV+36   . D:NMSP]""  S NMSP="" F  S NMSP=$O(NMSPS(NMSP)) Q:NMSP=""  D
     COV+52   . K ^TMP("%utCOVCOHORTSAV",$J)
     COV+53   . M ^TMP("%utCOVCOHORTSAV",$J)=^TMP("%utCOVCOHORT",$J)
     COV+54   . K ^TMP("%utCOVRESULT",$J)
     COV+55   . S ^TMP("%utcovrunning",$J)=1,%utcovxx=1
     COV+57   . I ($$GETSYS^%ut()=47) VIEW "TRACE":1:$NA(^TMP("%utCOVRESULT",$J)
)  ; GT.M START PROFILING
     COV+59   . I ($$GETSYS^%ut()=0) D  ; CACHE CODE TO START PROFILING
     COV+60   . . N NMSP,NMSPV S NMSP="",NMSPV="" F  S NMSPV=$O(RTNS(NMSPV)) Q:N
MSPV=""  S NMSP=NMSP_NMSPV_","
     COV+61   . . S NMSP=$E(NMSP,1,$L(NMSP)-1)
     COV+62   . . S STATUS=##class(%Monitor.System.LineByLine).Start($lb(NMSP),$
lb("RtnLine"),$lb($j))
     COV+70   . . SET $ETRAP="Q:($ES&$Q) -9 Q:$ES  W ""CTRL-C ENTERED"""
     COV+71   . . USE $PRINCIPAL:(CTRAP=$C(3))
     COV+72   . . Q
     COV+88   . . D TOTAGS(COVERSAV,0),TOTAGS(COVER,1)
     COV+89   . . D ##class(%Monitor.System.LineByLine).Stop()
     COV+90   . . Q
     COV+91   . D COVCOV($NA(^TMP("%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J
))) ; Venn diagram matching between globals
     COV+93   . I VERBOSITY=-1 D
     COV+94   . . K ^TMP("%utCOVREPORT",$J)
     COV+95   . . D COVRPTGL^%utcover($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("
%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J)),$NA(^TMP("%utCOVREPORT",$J)))
     COV+96   . . Q
     COV+97   . E  D COVRPT($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("%utCOVCOHO
RT",$J)),$NA(^TMP("%utCOVRESULT",$J)),VERBOSITY)
     COV+98   . Q
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1         (100.00%)   11 out of 11 lines covered
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Detailed Breakdown
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut             (95.10%)   272 out of 286 lines covered
  - Summary
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut               (93.85%)   61 out of 65 lines covered
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered


Routine %ut1            (86.25%)   232 out of 269 lines covered
  - Summary
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1         (100.00%)   11 out of 11 lines covered
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Summary
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut      (95.10%)   272 out of 286 lines covered
Routine %ut1      (86.25%)   232 out of 269 lines covered
Routine %utcover     (100.00%)   107 out of 107 lines covered


Overall Analysis 611 out of 662 lines covered (92% coverage)
xxxxxxxxxxxxxxxxxxxx Finished in ENTRY^%uttcovr




------------------- RUNNING VERBOSE2^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut


----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.-------------------------------------  [OK] 0ms
T2 - - Make sure Set-up runs.--------------------------------------  [OK] 0ms
T3 - - Make sure Teardown runs.------------------------------------  [OK] 0ms
T4 - Entry point using XTMENT.-------------------------------------  [OK] 0ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.------------------------------------------------------------------  [FAIL] 0ms
T6 - Succeed Entry Point...----------------------------------------  [OK] 0ms
T7 - Make sure we write to principal even though we are on another device..[OK] 
0ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.-------------------------------------------------------  [OK] 32ms
COVRPTGL - coverage report returning global....--------------------  [OK] 0ms

----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.[OK]
 0ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.----------------------------------------------------------------  [OK] 0ms

----------------------------------- %utt3 -----------------------------------
T1 - Test 1.-------------------------------------------------------  [OK] 0ms
T2 - Test 2.-------------------------------------------------------  [OK] 0ms

----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations--------------------------------  [OK] 0ms

----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.--------  [OK] 0ms
OLDSTYLE -  identify old style test indicator functionality..------  [OK] 0ms
OLDSTYL1 -  identify old style test indicator 2.-------------------  [OK] 0ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q
-------------------------------------------------------------------  [FAIL] 0ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-------------------------------------------------------------------  [FAIL] 0ms
LEAKSOK - check leaks should be ok---------------------------------  [OK] 0ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-------------------------------------------------------------------  [FAIL] 0ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-------------------------------------------------------------------  [FAIL] 0ms
ISUTEST - check ISUTEST inside unit test.--------------------------  [OK] 0ms

----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude...... [OK] 0ms
CHKCMDLN - check command line processing of %utt5------------------  [OK] 0ms
CHKGUI - check GUI processing of %utt5-----------------------------  [OK] 0ms
CKGUISET - check list of tests returned by GUISET------------------  [OK] 0ms
NEWSTYLE - test return of valid new style or @TEST indicators...---  [OK] 0ms

---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...------------------------------------  [OK] 0ms
COVCOV - - check COVCOV - remove seen lines......------------------  [OK] 0ms
COVRPT...........--------------------------------------------------  [OK] 0ms
COVRPTLS - - coverage report returning text in global...........--  [OK] 16ms
TRIMDATA - - TRIMDATA in %utcover..--------------------------------  [OK] 0ms
LIST - - LIST in %utcover............------------------------------  [OK] 0ms
CACHECOV - - set up routine for analysis in globals..-------------  [OK] 15ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............---------------------------------------------  [OK] 0ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........-----------------------  [OK] 0ms

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5


----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.--------  [OK] 0ms
OLDSTYLE -  identify old style test indicator functionality..------  [OK] 0ms
OLDSTYL1 -  identify old style test indicator 2.-------------------  [OK] 0ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q
-------------------------------------------------------------------  [FAIL] 0ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-------------------------------------------------------------------  [FAIL] 0ms
LEAKSOK - check leaks should be ok---------------------------------  [OK] 0ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-------------------------------------------------------------------  [FAIL] 0ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-------------------------------------------------------------------  [FAIL] 0ms
ISUTEST - check ISUTEST inside unit test.--------------------------  [OK] 0ms

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr



---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...------------------------------------  [OK] 0ms
COVCOV - - check COVCOV - remove seen lines......------------------  [OK] 0ms
COVRPT...........--------------------------------------------------  [OK] 0ms
COVRPTLS - - coverage report returning text in global...........--  [OK] 16ms
TRIMDATA - - TRIMDATA in %utcover..--------------------------------  [OK] 0ms
LIST - - LIST in %utcover............------------------------------  [OK] 0ms
CACHECOV - - set up routine for analysis in globals..-------------  [OK] 15ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............---------------------------------------------  [OK] 0ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........-----------------------  [OK] 0ms

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6



----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude...... [OK] 0ms
CHKCMDLN - check command line processing of %utt5------------------  [OK] 0ms
CHKGUI - check GUI processing of %utt5-----------------------------  [OK] 0ms
CKGUISET - check list of tests returned by GUISET------------------  [OK] 0ms
NEWSTYLE - test return of valid new style or @TEST indicators...---  [OK] 0ms

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING VERBOSE3^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut


----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.----------------------------------  [OK] .081ms
T2 - - Make sure Set-up runs.-----------------------------------  [OK] .065ms
T3 - - Make sure Teardown runs.----------------------------------  [OK] .06ms
T4 - Entry point using XTMENT.----------------------------------  [OK] .063ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.---------------------------------------------------------------  [FAIL] .139ms
T6 - Succeed Entry Point...-------------------------------------  [OK] .084ms
T7 - Make sure we write to principal even though we are on another device..[OK] 
12.232ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.----------------------------------------------------  [OK] 15.16ms
COVRPTGL - coverage report returning global....----------------  [OK] 2.021ms

----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.[OK]
 .09ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.-------------------------------------------------------------  [OK] .068ms

----------------------------------- %utt3 -----------------------------------
T1 - Test 1.----------------------------------------------------  [OK] .074ms
T2 - Test 2.----------------------------------------------------  [OK] .065ms

----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations-----------------------------  [OK] .056ms

----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.-----  [OK] .069ms
OLDSTYLE -  identify old style test indicator functionality..---  [OK] .092ms
OLDSTYL1 -  identify old style test indicator 2.----------------  [OK] .055ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
----------------------------------------------------------------  [FAIL] .076ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
----------------------------------------------------------------  [FAIL] .072ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q
----------------------------------------------------------------  [FAIL] .432ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
----------------------------------------------------------------  [FAIL] .072ms
LEAKSOK - check leaks should be ok------------------------------  [OK] .189ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
----------------------------------------------------------------  [FAIL] .413ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
----------------------------------------------------------------  [FAIL] .076ms
ISUTEST - check ISUTEST inside unit test.-----------------------  [OK] .058ms

----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......[OK] .218ms
CHKCMDLN - check command line processing of %utt5----------------  [OK] .03ms
CHKGUI - check GUI processing of %utt5--------------------------  [OK] .027ms
CKGUISET - check list of tests returned by GUISET----------------  [OK] .03ms
NEWSTYLE - test return of valid new style or @TEST indicators... [OK] 1.384ms

---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...---------------------------------  [OK] .931ms
COVCOV - - check COVCOV - remove seen lines......---------------  [OK] .471ms
COVRPT...........----------------------------------------------  [OK] 4.452ms
COVRPTLS - - coverage report returning text in global........... [OK] 4.038ms
TRIMDATA - - TRIMDATA in %utcover..-----------------------------  [OK] .186ms
LIST - - LIST in %utcover............--------------------------  [OK] 1.187ms
CACHECOV - - set up routine for analysis in globals..----------  [OK] 9.918ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............------------------------------------------  [OK] .372ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........--------------------  [OK] .751ms

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5


----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.-----  [OK] .083ms
OLDSTYLE -  identify old style test indicator functionality..---  [OK] .082ms
OLDSTYL1 -  identify old style test indicator 2.----------------  [OK] .062ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
----------------------------------------------------------------  [FAIL] .081ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
----------------------------------------------------------------  [FAIL] .074ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q
----------------------------------------------------------------  [FAIL] .456ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
----------------------------------------------------------------  [FAIL] .079ms
LEAKSOK - check leaks should be ok------------------------------  [OK] .209ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-----------------------------------------------------------------  [FAIL] .27ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
----------------------------------------------------------------  [FAIL] .206ms
ISUTEST - check ISUTEST inside unit test.-----------------------  [OK] .068ms

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr



---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...----------------------------------  [OK] .98ms
COVCOV - - check COVCOV - remove seen lines......---------------  [OK] .455ms
COVRPT...........----------------------------------------------  [OK] 4.374ms
COVRPTLS - - coverage report returning text in global........... [OK] 4.216ms
TRIMDATA - - TRIMDATA in %utcover..------------------------------  [OK] .21ms
LIST - - LIST in %utcover............--------------------------  [OK] 1.325ms
CACHECOV - - set up routine for analysis in globals..----------  [OK] 11.82ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............------------------------------------------  [OK] .415ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........--------------------  [OK] .908ms

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6



----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......[OK] .26ms
CHKCMDLN - check command line processing of %utt5---------------  [OK] .049ms
CHKGUI - check GUI processing of %utt5--------------------------  [OK] .039ms
CKGUISET - check list of tests returned by GUISET---------------  [OK] .038ms
NEWSTYLE - test return of valid new style or @TEST indicators... [OK] 1.602ms

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING VERBOSE^%utt1(3) -------------------


Running tests in VERBOSE mode with fractional millisecond timing


----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.-----------------------------------  [OK] .08ms
T2 - - Make sure Set-up runs.-----------------------------------  [OK] .059ms
T3 - - Make sure Teardown runs.---------------------------------  [OK] .055ms
T4 - Entry point using XTMENT.----------------------------------  [OK] .058ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.---------------------------------------------------------------  [FAIL] .131ms
T6 - Succeed Entry Point...-------------------------------------  [OK] .077ms
T7 - Make sure we write to principal even though we are on another device..[OK] 
12.458ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.---------------------------------------------------  [OK] 15.938ms
COVRPTGL - coverage report returning global....----------------  [OK] 1.729ms

----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.[OK]
 .07ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.--------------------------------------------------------------  [OK] .06ms

----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations-----------------------------  [OK] .044ms

----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.-----  [OK] .054ms
OLDSTYLE -  identify old style test indicator functionality..---  [OK] .071ms
OLDSTYL1 -  identify old style test indicator 2.----------------  [OK] .051ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
----------------------------------------------------------------  [FAIL] .076ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
----------------------------------------------------------------  [FAIL] .074ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q
----------------------------------------------------------------  [FAIL] .382ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-----------------------------------------------------------------  [FAIL] .06ms
LEAKSOK - check leaks should be ok------------------------------  [OK] .161ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
----------------------------------------------------------------  [FAIL] .229ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-----------------------------------------------------------------  [FAIL] .06ms
ISUTEST - check ISUTEST inside unit test.-----------------------  [OK] .053ms

----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......[OK] .316ms
CHKCMDLN - check command line processing of %utt5---------------  [OK] .038ms
CHKGUI - check GUI processing of %utt5--------------------------  [OK] .032ms
CKGUISET - check list of tests returned by GUISET---------------  [OK] .033ms
NEWSTYLE - test return of valid new style or @TEST indicators... [OK] 1.492ms

---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...--------------------------------  [OK] 1.281ms
COVCOV - - check COVCOV - remove seen lines......---------------  [OK] .459ms
COVRPT...........----------------------------------------------  [OK] 3.843ms
COVRPTLS - - coverage report returning text in global........... [OK] 3.878ms
TRIMDATA - - TRIMDATA in %utcover..-----------------------------  [OK] .168ms
LIST - - LIST in %utcover............--------------------------  [OK] 1.173ms
CACHECOV - - set up routine for analysis in globals..----------  [OK] 8.983ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............------------------------------------------  [OK] .337ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........--------------------  [OK] .679ms

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.

------------------- RUNNING VERBOSE^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut


----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.-----------------------------------------  [OK]
T2 - - Make sure Set-up runs.------------------------------------------  [OK]
T3 - - Make sure Teardown runs.----------------------------------------  [OK]
T4 - Entry point using XTMENT.-----------------------------------------  [OK]
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.----------------------------------------------------------------------  [FAIL]
T6 - Succeed Entry Point...--------------------------------------------  [OK]
T7 - Make sure we write to principal even though we are on another device..[OK]
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.------------------------------------------------------------  [OK]
COVRPTGL - coverage report returning global....------------------------  [OK]

----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.[OK]
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.--------------------------------------------------------------------  [OK]

----------------------------------- %utt3 -----------------------------------
T1 - Test 1.-----------------------------------------------------------  [OK]
T2 - Test 2.-----------------------------------------------------------  [OK]

----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations------------------------------------  [OK]

----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.------------  [OK]
OLDSTYLE -  identify old style test indicator functionality..----------  [OK]
OLDSTYL1 -  identify old style test indicator 2.-----------------------  [OK]
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q
-----------------------------------------------------------------------  [FAIL]
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-----------------------------------------------------------------------  [FAIL]
LEAKSOK - check leaks should be ok-------------------------------------  [OK]
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-----------------------------------------------------------------------  [FAIL]
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-----------------------------------------------------------------------  [FAIL]
ISUTEST - check ISUTEST inside unit test.------------------------------  [OK]

----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......---  [OK]
CHKCMDLN - check command line processing of %utt5----------------------  [OK]
CHKGUI - check GUI processing of %utt5---------------------------------  [OK]
CKGUISET - check list of tests returned by GUISET----------------------  [OK]
NEWSTYLE - test return of valid new style or @TEST indicators...-------  [OK]

---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...----------------------------------------  [OK]
COVCOV - - check COVCOV - remove seen lines......----------------------  [OK]
COVRPT...........------------------------------------------------------  [OK]
COVRPTLS - - coverage report returning text in global...........-------  [OK]
TRIMDATA - - TRIMDATA in %utcover..------------------------------------  [OK]
LIST - - LIST in %utcover............----------------------------------  [OK]
CACHECOV - - set up routine for analysis in globals..------------------  [OK]
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............-------------------------------------------------  [OK]
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........---------------------------  [OK]

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5


----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.------------  [OK]
OLDSTYLE -  identify old style test indicator functionality..----------  [OK]
OLDSTYL1 -  identify old style test indicator 2.-----------------------  [OK]
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q
-----------------------------------------------------------------------  [FAIL]
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-----------------------------------------------------------------------  [FAIL]
LEAKSOK - check leaks should be ok-------------------------------------  [OK]
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-----------------------------------------------------------------------  [FAIL]
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-----------------------------------------------------------------------  [FAIL]
ISUTEST - check ISUTEST inside unit test.------------------------------  [OK]

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr



---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...----------------------------------------  [OK]
COVCOV - - check COVCOV - remove seen lines......----------------------  [OK]
COVRPT...........------------------------------------------------------  [OK]
COVRPTLS - - coverage report returning text in global...........-------  [OK]
TRIMDATA - - TRIMDATA in %utcover..------------------------------------  [OK]
LIST - - LIST in %utcover............----------------------------------  [OK]
CACHECOV - - set up routine for analysis in globals..------------------  [OK]
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............-------------------------------------------------  [OK]
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........---------------------------  [OK]

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6



----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......---  [OK]
CHKCMDLN - check command line processing of %utt5----------------------  [OK]
CHKGUI - check GUI processing of %utt5---------------------------------  [OK]
CKGUISET - check list of tests returned by GUISET----------------------  [OK]
NEWSTYLE - test return of valid new style or @TEST indicators...-------  [OK]

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%ut -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%ut1 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%utcover -------------------
......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%utt1 -------------------

Running tests in NON-VERBOSE mode
For Verbose mode use DO VERBOSE^%utt1(ARG) where ARG is an integer 1 to 3
ENTER RETURN TO CONTINUE: ....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.

------------------- RUNNING ^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: <UNDEFINED>BADERROR+6^%utt
5 *Q

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.


------------ SUMMARY ------------
Ran 20 Routines, 122 Entry Tags
Checked 412 tests, with 14 failures and encountered 2 errors.


Routine %ut             (96.15%)   275 out of 286 lines covered
  - Detailed Breakdown
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut              (100.00%)   65 out of 65 lines covered
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut             (0.00%)   0 out of 1 lines covered
   the following is a list of the lines **NOT** covered
     GTMVER+1   Q $S($G(X):$P($ZV," ",3,99),1:$P($P($ZV," V",2)," "))
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered
   the following is a list of the lines **NOT** covered
     ZHDIF+1   N SC0 S SC0=$P(%ZH0,",",2)
     ZHDIF+2   N SC1 S SC1=$P(%ZH1,",",2)
     ZHDIF+3   N DC0 S DC0=$P(%ZH0,",")*86400
     ZHDIF+4   N DC1 S DC1=$P(%ZH1,",")*86400
     ZHDIF+5   N MCS0 S MCS0=$P(%ZH0,",",3)/1000000
     ZHDIF+6   N MCS1 S MCS1=$P(%ZH1,",",3)/1000000
     ZHDIF+8   N T0 S T0=SC0+DC0+MCS0
     ZHDIF+9   N T1 S T1=SC1+DC1+MCS1
     ZHDIF+11   N %ZH2 S %ZH2=T1-T0*1000
     ZHDIF+12   QUIT %ZH2_"ms"


Routine %ut1            (86.25%)   232 out of 269 lines covered
  - Detailed Breakdown
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
   the following is a list of the lines **NOT** covered
     CACHECOV+17   . . N % S %N=0 F XCNP=XCNP+1:1 S %N=%N+1,%=$T(+%N^@X) Q:$L(%)
=0  S @(DIF_XCNP_",0)")=%
     CACHECOV+18   . . Q
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
   the following is a list of the lines **NOT** covered
     COV+18   . N NMSP S NMSP=$G(NMSPS)
     COV+19   . D:NMSP]""  S NMSP="" F  S NMSP=$O(NMSPS(NMSP)) Q:NMSP=""  D
     COV+20   .. N %ZR ; GT.M specific
     COV+21   .. D SILENT^%RSEL(NMSP,"SRC") ; GT.M specific. On Cache use $O(^$R
(RTN)).
     COV+22   .. N RN S RN=""
     COV+23   .. F  S RN=$O(%ZR(RN)) Q:RN=""  W RN," " D
     COV+24   ... N L2 S L2=$T(+2^@RN)
     COV+26   . . . S L2=$TR(L2,$C(9)," ") ; change tabs to spaces ; JLI 160316 
inserted to replace above
     COV+29   . . . I $E($P(L2," ",2),1,2)'=";;" K %ZR(RN) W !,"Routine "_RN_" r
emoved from analysis, since it doesn't have the standard second line",! ; JLI 16
0316 inserted to replace above
     COV+30   .. M RTNS=%ZR
     COV+31   .. K %ZR
     COV+32   . Q
     COV+36   . D:NMSP]""  S NMSP="" F  S NMSP=$O(NMSPS(NMSP)) Q:NMSP=""  D
     COV+52   . K ^TMP("%utCOVCOHORTSAV",$J)
     COV+53   . M ^TMP("%utCOVCOHORTSAV",$J)=^TMP("%utCOVCOHORT",$J)
     COV+54   . K ^TMP("%utCOVRESULT",$J)
     COV+55   . S ^TMP("%utcovrunning",$J)=1,%utcovxx=1
     COV+57   . I ($$GETSYS^%ut()=47) VIEW "TRACE":1:$NA(^TMP("%utCOVRESULT",$J)
)  ; GT.M START PROFILING
     COV+59   . I ($$GETSYS^%ut()=0) D  ; CACHE CODE TO START PROFILING
     COV+60   . . N NMSP,NMSPV S NMSP="",NMSPV="" F  S NMSPV=$O(RTNS(NMSPV)) Q:N
MSPV=""  S NMSP=NMSP_NMSPV_","
     COV+61   . . S NMSP=$E(NMSP,1,$L(NMSP)-1)
     COV+62   . . S STATUS=##class(%Monitor.System.LineByLine).Start($lb(NMSP),$
lb("RtnLine"),$lb($j))
     COV+70   . . SET $ETRAP="Q:($ES&$Q) -9 Q:$ES  W ""CTRL-C ENTERED"""
     COV+71   . . USE $PRINCIPAL:(CTRAP=$C(3))
     COV+72   . . Q
     COV+88   . . D TOTAGS(COVERSAV,0),TOTAGS(COVER,1)
     COV+89   . . D ##class(%Monitor.System.LineByLine).Stop()
     COV+90   . . Q
     COV+91   . D COVCOV($NA(^TMP("%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J
))) ; Venn diagram matching between globals
     COV+93   . I VERBOSITY=-1 D
     COV+94   . . K ^TMP("%utCOVREPORT",$J)
     COV+95   . . D COVRPTGL^%utcover($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("
%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J)),$NA(^TMP("%utCOVREPORT",$J)))
     COV+96   . . Q
     COV+97   . E  D COVRPT($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("%utCOVCOHO
RT",$J)),$NA(^TMP("%utCOVRESULT",$J)),VERBOSITY)
     COV+98   . Q
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1         (100.00%)   11 out of 11 lines covered
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Detailed Breakdown
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut             (96.15%)   275 out of 286 lines covered
  - Summary
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut              (100.00%)   65 out of 65 lines covered
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut             (0.00%)   0 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered


Routine %ut1            (86.25%)   232 out of 269 lines covered
  - Summary
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1         (100.00%)   11 out of 11 lines covered
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Summary
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut      (96.15%)   275 out of 286 lines covered
Routine %ut1      (86.25%)   232 out of 269 lines covered
Routine %utcover     (100.00%)   107 out of 107 lines covered


Overall Analysis 614 out of 662 lines covered (92% coverage)
VISTA>
