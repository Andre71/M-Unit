
The following capture shows the installation of M-Unit (MASH*1.5*0) on a GT.M 
system (version 6.2) running VistA.  Following installation, the unit tests for 
the package and coverage analysis were performed twice.  In GT.M when a routine 
is first run, any apparent problems are identified and listed as the routine is 
running.  These are the result of sections of code for Intersystems Cache being 
present which is not attempted to be run in a GT.M system.  The second capture 
which does not include this excess material is presented here.

The commands used are:
   D ^XUP    - used to perform the installation
   
   D ^%utt1  - this runs the unit tests showing periods for each passing test 
   
   D EN^%ut("%utt1",3) - runs unit tests with VERBOSITY	set to 3, this 
               causes each test to be listed with its result and at level 
               3 it lists execution time for each test in fractional 
               milliseconds
               
   D ^%uttcovr - runs detailed coverage analysis for the unit test routines 
                 with level set to 3, which lists coverage by routine, 
                 coverage by tag within routines, and within each routine lists 
                 by tag lines that were NOT covered
   
The example showing unit tests with a specification of verbosity set to 3, which 
normally shows execution times in fractions of a millisecond, shows only 
milliseconds since this capture was run in version 6.2 of GTM which does not 
support the fractional milliseconds. [Problems were encountered in attempting to
load VistA into the instance of GT.M with V6.3-000, the fractional milliseconds 
is shown in the MASH*1.5*0 GT.M installation without VistA.]



Script started on Tue 04 Jul 2017 10:18:47 PM EDT
[softhat@softhat-VirtualBox jli]$ ls
MASH_1.5_0.KID
[softhat@softhat-VirtualBox jli]$ dos2unix MASH_1.5_0.KID
dos2unix: converting file MASH_1.5_0.KID to Unix format ...
[softhat@softhat-VirtualBox jli]$ mumps -dir

GTM>S DUZ=1 D Q^DI,^%ZIS

VA FILEMAN 22.2V2

Select OPTION: 
DEVICE: HOME//   TELNET

GTM>D ^XUP

Setting up programmer environment
This is a TEST account.

Terminal Type set to: C-VT220

Select OPTION NAME: EVE
     1   EVE       Systems Manager Menu
     2   EVENT CAPTURE  ECX ECS MAINTENANCE     Event Capture
     3   EVENT CAPTURE (ECS) EXTRACT AU  ECX ECS SOURCE AUDIT     Event Capture 
(ECS) Extract Audit
     4   EVENT CAPTURE DATA ENTRY  ECENTER     Event Capture Data Entry
     5   EVENT CAPTURE EXTRACT  ECXEC     Event Capture Extract
Press <Enter> to see more, '^' to exit this list,  OR
CHOOSE 1-5: 1  EVE     Systems Manager Menu

WARNING -- TASK MANAGER DOESN'T SEEM TO BE RUNNING!!!!


          Core Applications ...
          Device Management ...
          Menu Management ...
          Programmer Options ...
          Operations Management ...
          Spool Management ...
          Information Security Officer Menu ...
          Taskman Management ...
          User Management ...
          Application Utilities ...
          Capacity Planning ...
          HL7 Main Menu ...


You have PENDING ALERTS
          Enter  "VA to jump to VIEW ALERTS option

Select Systems Manager Menu <TEST ACCOUNT> Option: PROGrammer Options


   KIDS   Kernel Installation & Distribution System ...
   PG     Programmer mode
          Delete Unreferenced Options
          Error Processing ...
          Global Block Count
          Routine Tools ...


You have PENDING ALERTS
          Enter  "VA to jump to VIEW ALERTS option

Select Programmer Options <TEST ACCOUNT> Option: KIDS  Kernel Installation & Dis
tribution System


          Edits and Distribution ...
          Utilities ...
          Installation ...
          Patch Monitor Main Menu ...


You have PENDING ALERTS
          Enter  "VA to jump to VIEW ALERTS option

Select Kernel Installation & Distribution System <TEST ACCOUNT> Option: INSTalla
tion


   1      Load a Distribution
   2      Verify Checksums in Transport Global
   3      Print Transport Global
   4      Compare Transport Global to Current System
   5      Backup a Transport Global
   6      Install Package(s)
          Restart Install of Package(s)
          Unload a Distribution


You have PENDING ALERTS
          Enter  "VA to jump to VIEW ALERTS option

Select Installation <TEST ACCOUNT> Option: LOAd a Distribution
Enter a Host File: /home/softhat/jli/MASH_1.5_0.KID

KIDS Distribution saved on Jul 04, 2017@12:57:48
Comment: Updated version of M-Unit functionality

This Distribution contains Transport Globals for the following Package(s):
   MASH*1.5*0
Distribution OK!

Want to Continue with Load? YES// 
Loading Distribution...

   MASH*1.5*0
Use INSTALL NAME: MASH*1.5*0 to install this Distribution.

   1      Load a Distribution
   2      Verify Checksums in Transport Global
   3      Print Transport Global
   4      Compare Transport Global to Current System
   5      Backup a Transport Global
   6      Install Package(s)
          Restart Install of Package(s)
          Unload a Distribution

You have PENDING ALERTS
          Enter  "VA to jump to VIEW ALERTS option

Select Installation <TEST ACCOUNT> Option: INSTall Package(s)
Select INSTALL NAME: MASH*1.5*0       Loaded from Distribution    7/4/17@22:23:2
5
     => Updated version of M-Unit functionality  ;Created on Jul 04, 2017@12:5

This Distribution was loaded on Jul 04, 2017@22:23:25 with header of 
   Updated version of M-Unit functionality  ;Created on Jul 04, 2017@12:57:48
   It consisted of the following Install(s):
     MASH*1.5*0
Checking Install for Package MASH*1.5*0

Install Questions for MASH*1.5*0

Incoming Files:


   17.9001   M-UNIT TEST GROUP  (including data)

Want KIDS to Rebuild Menu Trees Upon Completion of Install? NO// 


Want KIDS to INHIBIT LOGONs during the install? NO// 
Want to DISABLE Scheduled Options, Menu Options, and Protocols? NO// 

Enter the Device you want to print the Install messages.
You can queue the install by enter a 'Q' at the device prompt.
Enter a '^' to abort the install.

DEVICE: HOME//   TELNET
 
 Install Started for MASH*1.5*0 : 
               Jul 04, 2017@22:24
 
Build Distribution Date: Jul 04, 2017
 
 Installing Routines:
 
---------------------------- ADDED COMMENT --------------------------------
   While they pass rapidly, a number of apparent errors may be listed, but 
   these are due to code for Cache systems which is not identified by the 
   GT.M system.  This may be seen again, the first time that unit tests 
   are run, but on repeating them the apparent errors are not shown on 
   subsequent runs.
-----------------------  END OF ADDED COMMENT  ---------------------------


 
 Running Pre-Install Routine: ^ZZUTPRE
 
 Installing Data Dictionaries: 
               Jul 04, 2017@22:24:04
 
 Installing Data: 
               Jul 04, 2017@22:24:04
 
 Installing PACKAGE COMPONENTS: 
 
 Installing REMOTE PROCEDURE
 
 Installing OPTION
               Jul 04, 2017@22:24:05
 
 Running Post-Install Routine: ^ZZUTPOST
Routine:       ut Loaded, Saved as      %ut
 
Routine:      ut1 Loaded, Saved as     %ut1
 
Routine:  utcover Loaded, Saved as %utcover
 
Routine:     utt1 Loaded, Saved as    %utt1
 
Routine:     utt2 Loaded, Saved as    %utt2
 
Routine:     utt3 Loaded, Saved as    %utt3
 
Routine:     utt4 Loaded, Saved as    %utt4
 
Routine:     utt5 Loaded, Saved as    %utt5
 
Routine:     utt6 Loaded, Saved as    %utt6
 
Routine:     utt7 Loaded, Saved as    %utt7
 
Routine:  uttcovr Loaded, Saved as %uttcovr
 
 
 Updating Routine file...
 
 Updating KIDS files...
 
 MASH*1.5*0 Installed. 
               Jul 04, 2017@22:24:05
 
 NO Install Message sent 

Install Completed

   1      Load a Distribution
   2      Verify Checksums in Transport Global
   3      Print Transport Global
   4      Compare Transport Global to Current System
   5      Backup a Transport Global
   6      Install Package(s)
          Restart Install of Package(s)
          Unload a Distribution

Select Installation <TEST ACCOUNT> Option: ^PG   Programmer mode
%GTM-I-BREAK, Break instruction encountered
		At M source location PRGMODE+6^%ZOSV




GTM>D ^%utt1

Running tests in NON-VERBOSE mode
For Verbose mode use DO VERBOSE^%utt1(ARG) where ARG is an integer 1 to 3
ENTER RETURN TO CONTINUE: ....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
......%utt3 ...........
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.

GTM>


GTM>


GTM>


GTM>


GTM>


GTM>d EN^%ut("%utt1",3)


 ----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.--------------------------------  [OK]    0.000ms
T2 - - Make sure Set-up runs.---------------------------------  [OK]    0.000ms
T3 - - Make sure Teardown runs.-------------------------------  [OK]    0.000ms
T4 - Entry point using XTMENT.--------------------------------  [OK]    0.000ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.-------------------------------------------------------------  [FAIL]    0.000m
s
T6 - Succeed Entry Point...-----------------------------------  [OK]    0.000ms
T7 - Make sure we write to principal even though we are on another device..
 -------------------------------------------------------------  [OK]    0.000ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.---------------------------------------------------  [OK]    0.000ms
COVRPTGL - coverage report returning global....---------------  [OK]    0.000ms

 ----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.
 -------------------------------------------------------------  [OK]    0.000ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.-----------------------------------------------------------  [OK]    0.000ms

 ----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations---------------------------  [OK]    0.000ms

 ----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.---  [OK]    0.000ms
OLDSTYLE -  identify old style test indicator functionality..-  [OK]    0.000ms
OLDSTYL1 -  identify old style test indicator 2.--------------  [OK]    0.000ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
--------------------------------------------------------------  [FAIL]    0.000m
s
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
--------------------------------------------------------------  [FAIL]    0.000m
s
LEAKSOK - check leaks should be ok----------------------------  [OK]    0.000ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
--------------------------------------------------------------  [FAIL]    0.000m
s
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
--------------------------------------------------------------  [FAIL]    0.000m
s
ISUTEST - check ISUTEST inside unit test.---------------------  [OK]    0.000ms

 ----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......
 -------------------------------------------------------------  [OK]    0.000ms
CHKCMDLN - check command line processing of %utt5-------------  [OK]    0.000ms
CHKGUI - check GUI processing of %utt5------------------------  [OK]    0.000ms
CKGUISET - check list of tests returned by GUISET-------------  [OK]    0.000ms
NEWSTYLE - test return of valid new style or @TEST indicators...[OK]    0.000ms

 ---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...-------------------------------  [OK]    0.000ms
COVCOV - - check COVCOV - remove seen lines......-------------  [OK]    0.000ms
COVRPT...........---------------------------------------------  [OK]   10.000ms
COVRPTLS - - coverage report returning text in global...........[OK]    0.000ms
TRIMDATA - - TRIMDATA in %utcover..---------------------------  [OK]    0.000ms
LIST - - LIST in %utcover............-------------------------  [OK]    0.000ms
CACHECOV - - set up routine for analysis in globals..---------  [OK]   20.000ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............----------------------------------------  [OK]    0.000ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........------------------  [OK]    0.000ms

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.

GTM>


GTM>


GTM>


GTM>


GTM>


GTM>d ^%uttcovr

Loading routines to test coverage...
%ut %ut1 %utcover %utf2hex 
Routine %utf2hex removed from analysis, since it doesn't have the standard secon
d line format
%utt1 %utt2 %utt3 %utt4 %utt5 %utt6 %utt7 %uttcovr 

------------------- RUNNING %utt1 -------------------
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.
Coventry ROU=%utt1

------------------- RUNNING %uttcovr -------------------
......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.
Coventry ROU=%uttcovr

------------------- RUNNING ENTRY^%uttcovr -------------------

LEAKSBAD TEST - X NOT SPECIFIED VARIABLE LEAK: X
xxxxxxxxxxxxxxxxxxxx GOING TO COV^%ut FOR %utt5 at 3



Loading routines to test coverage...
%ut1 ....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.
xxxxxxxxxxxxxxxxxxxx GOING TO COV^%ut FOR %utt5 at -1



Loading routines to test coverage...
%ut1 ....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.
xxxxxxxxxxxxxxxxxxxx GOING TO MULTAPIS for %utt4 and %ut




------------------- RUNNING ^%ut -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
Coventry ROU=^%ut

------------------- RUNNING ^%utt4 -------------------


 ----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations------------------------------------  [OK]

Ran 1 Routine, 1 Entry Tag
Checked 0 test, with 0 failures and encountered 0 errors.
Coventry ROU=^%utt4


------------ SUMMARY ------------
Ran 2 Routines, 6 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
xxxxxxxxxxxxxxxxxxxx GOING TO COVERAGE for %utt4 and %ut at 3



Loading routines to test coverage...
%ut %ut1 %utcover %utf2hex 
Routine %utf2hex removed from analysis, since it doesn't have the standard secon
d line format
%utt1 %utt2 %utt3 %utt4 %utt5 %utt6 %utt7 %uttcovr 

------------------- RUNNING ^%ut -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
Coventry ROU=^%ut

------------------- RUNNING ^%utt4 -------------------


 ----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations------------------------------------  [OK]

Ran 1 Routine, 1 Entry Tag
Checked 0 test, with 0 failures and encountered 0 errors.
Coventry ROU=^%utt4


------------ SUMMARY ------------
Ran 2 Routines, 6 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.


Routine %utt3           (73.68%)   14 out of 19 lines covered
  - Detailed Breakdown
 Tag INTERNAL^%utt3        (40.00%)   2 out of 5 lines covered
   the following is a list of the lines **NOT** covered
     INTERNAL+3   S A=2      ; Dead code
     INTERNAL+4   S Y=2      ; Dead code
     INTERNAL+5   QUIT       ; Dead code
 Tag SETUP^%utt3          (100.00%)   1 out of 1 lines covered
 Tag SHUTDOWN^%utt3       (100.00%)   1 out of 1 lines covered
 Tag STARTUP^%utt3        (100.00%)   3 out of 3 lines covered
 Tag T1^%utt3             (100.00%)   2 out of 2 lines covered
 Tag T2^%utt3              (60.00%)   3 out of 5 lines covered
   the following is a list of the lines **NOT** covered
     T2+4   S X=1                  ; Dead code
     T2+5   QUIT                   ; Dead code
 Tag TEARDOWN^%utt3       (100.00%)   2 out of 2 lines covered
 Tag XTMUNITV^%utt3         ------    0 out of 0 lines covered


Routine %utt3           (73.68%)   14 out of 19 lines covered
  - Summary
 Tag INTERNAL^%utt3        (40.00%)   2 out of 5 lines covered
 Tag SETUP^%utt3          (100.00%)   1 out of 1 lines covered
 Tag SHUTDOWN^%utt3       (100.00%)   1 out of 1 lines covered
 Tag STARTUP^%utt3        (100.00%)   3 out of 3 lines covered
 Tag T1^%utt3             (100.00%)   2 out of 2 lines covered
 Tag T2^%utt3              (60.00%)   3 out of 5 lines covered
 Tag TEARDOWN^%utt3       (100.00%)   2 out of 2 lines covered
 Tag XTMUNITV^%utt3         ------    0 out of 0 lines covered


Routine %utt3      (73.68%)   14 out of 19 lines covered


Overall Analysis 14 out of 19 lines covered (73% coverage)
xxxxxxxxxxxxxxxxxxxx LISTING DATA VIA LIST





Routine %utt3           (73.68%)   14 out of 19 lines covered
  - Detailed Breakdown
 Tag INTERNAL^%utt3        (40.00%)   2 out of 5 lines covered
   the following is a list of the lines **NOT** covered
     INTERNAL+3   S A=2      ; Dead code
     INTERNAL+4   S Y=2      ; Dead code
     INTERNAL+5   QUIT       ; Dead code
 Tag SETUP^%utt3          (100.00%)   1 out of 1 lines covered
 Tag SHUTDOWN^%utt3       (100.00%)   1 out of 1 lines covered
 Tag STARTUP^%utt3        (100.00%)   3 out of 3 lines covered
 Tag T1^%utt3             (100.00%)   2 out of 2 lines covered
 Tag T2^%utt3              (60.00%)   3 out of 5 lines covered
   the following is a list of the lines **NOT** covered
     T2+4   S X=1                  ; Dead code
     T2+5   QUIT                   ; Dead code
 Tag TEARDOWN^%utt3       (100.00%)   2 out of 2 lines covered
 Tag XTMUNITV^%utt3         ------    0 out of 0 lines covered


Routine %utt3           (73.68%)   14 out of 19 lines covered
  - Summary
 Tag INTERNAL^%utt3        (40.00%)   2 out of 5 lines covered
 Tag SETUP^%utt3          (100.00%)   1 out of 1 lines covered
 Tag SHUTDOWN^%utt3       (100.00%)   1 out of 1 lines covered
 Tag STARTUP^%utt3        (100.00%)   3 out of 3 lines covered
 Tag T1^%utt3             (100.00%)   2 out of 2 lines covered
 Tag T2^%utt3              (60.00%)   3 out of 5 lines covered
 Tag TEARDOWN^%utt3       (100.00%)   2 out of 2 lines covered
 Tag XTMUNITV^%utt3         ------    0 out of 0 lines covered


Routine %utt3      (73.68%)   14 out of 19 lines covered


Overall Analysis 14 out of 19 lines covered (73% coverage)
xxxxxxxxxxxxxxxxxxxx Finished in ENTRY^%uttcovr



Coventry ROU=ENTRY^%uttcovr

------------------- RUNNING VERBOSE2^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut


 ----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.--------------------------------  [OK]    0.000ms
T2 - - Make sure Set-up runs.---------------------------------  [OK]    0.000ms
T3 - - Make sure Teardown runs.-------------------------------  [OK]    0.000ms
T4 - Entry point using XTMENT.--------------------------------  [OK]    0.000ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.-------------------------------------------------------------  [FAIL]    0.000m
s
T6 - Succeed Entry Point...-----------------------------------  [OK]    0.000ms
T7 - Make sure we write to principal even though we are on another device..
 -------------------------------------------------------------  [OK]    0.000ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.---------------------------------------------------  [OK]    0.000ms
COVRPTGL - coverage report returning global....---------------  [OK]   20.000ms

 ----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.
 -------------------------------------------------------------  [OK]    0.000ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.-----------------------------------------------------------  [OK]    0.000ms

 ----------------------------------- %utt3 -----------------------------------
T1 - Test 1.--------------------------------------------------  [OK]    0.000ms
T2 - Test 2.--------------------------------------------------  [OK]    0.000ms

 ----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations---------------------------  [OK]    0.000ms

 ----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.---  [OK]    0.000ms
OLDSTYLE -  identify old style test indicator functionality..-  [OK]    0.000ms
OLDSTYL1 -  identify old style test indicator 2.--------------  [OK]    0.000ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
--------------------------------------------------------------  [FAIL]    0.000m
s
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
--------------------------------------------------------------  [FAIL]    0.000m
s
LEAKSOK - check leaks should be ok----------------------------  [OK]    0.000ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
--------------------------------------------------------------  [FAIL]    0.000m
s
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
--------------------------------------------------------------  [FAIL]    0.000m
s
ISUTEST - check ISUTEST inside unit test.---------------------  [OK]    0.000ms

 ----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......
 -------------------------------------------------------------  [OK]    0.000ms
CHKCMDLN - check command line processing of %utt5-------------  [OK]    0.000ms
CHKGUI - check GUI processing of %utt5------------------------  [OK]    0.000ms
CKGUISET - check list of tests returned by GUISET-------------  [OK]    0.000ms
NEWSTYLE - test return of valid new style or @TEST indicators...[OK]    0.000ms

 ---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...-------------------------------  [OK]    0.000ms
COVCOV - - check COVCOV - remove seen lines......-------------  [OK]    0.000ms
COVRPT...........---------------------------------------------  [OK]   20.000ms
COVRPTLS - - coverage report returning text in global...........[OK]   10.000ms
TRIMDATA - - TRIMDATA in %utcover..---------------------------  [OK]    0.000ms
LIST - - LIST in %utcover............-------------------------  [OK]    0.000ms
CACHECOV - - set up routine for analysis in globals..---------  [OK]   20.000ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............----------------------------------------  [OK]    0.000ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........------------------  [OK]    0.000ms

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5


 ----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.---  [OK]    0.000ms
OLDSTYLE -  identify old style test indicator functionality..-  [OK]    0.000ms
OLDSTYL1 -  identify old style test indicator 2.--------------  [OK]    0.000ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
--------------------------------------------------------------  [FAIL]    0.000m
s
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
--------------------------------------------------------------  [FAIL]    0.000m
s
LEAKSOK - check leaks should be ok----------------------------  [OK]    0.000ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
--------------------------------------------------------------  [FAIL]    0.000m
s
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
--------------------------------------------------------------  [FAIL]    0.000m
s
ISUTEST - check ISUTEST inside unit test.---------------------  [OK]    0.000ms

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr



 ---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...-------------------------------  [OK]    0.000ms
COVCOV - - check COVCOV - remove seen lines......-------------  [OK]   10.000ms
COVRPT...........---------------------------------------------  [OK]    0.000ms
COVRPTLS - - coverage report returning text in global...........[OK]   10.000ms
TRIMDATA - - TRIMDATA in %utcover..---------------------------  [OK]    0.000ms
LIST - - LIST in %utcover............-------------------------  [OK]   10.000ms
CACHECOV - - set up routine for analysis in globals..---------  [OK]   10.000ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............----------------------------------------  [OK]   10.000ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........------------------  [OK]    0.000ms

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6



 ----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......
 -------------------------------------------------------------  [OK]    0.000ms
CHKCMDLN - check command line processing of %utt5-------------  [OK]    0.000ms
CHKGUI - check GUI processing of %utt5------------------------  [OK]    0.000ms
CKGUISET - check list of tests returned by GUISET-------------  [OK]    0.000ms
NEWSTYLE - test return of valid new style or @TEST indicators...[OK]   10.000ms

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
Coventry ROU=VERBOSE2^%utt6

------------------- RUNNING VERBOSE3^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut


 ----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.--------------------------------  [OK]    0.000ms
T2 - - Make sure Set-up runs.---------------------------------  [OK]    0.000ms
T3 - - Make sure Teardown runs.-------------------------------  [OK]    0.000ms
T4 - Entry point using XTMENT.--------------------------------  [OK]    0.000ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.-------------------------------------------------------------  [FAIL]    0.000m
s
T6 - Succeed Entry Point...-----------------------------------  [OK]    0.000ms
T7 - Make sure we write to principal even though we are on another device..
 -------------------------------------------------------------  [OK]   10.000ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.---------------------------------------------------  [OK]    0.000ms
COVRPTGL - coverage report returning global....---------------  [OK]    0.000ms

 ----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.
 -------------------------------------------------------------  [OK]    0.000ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.-----------------------------------------------------------  [OK]    0.000ms

 ----------------------------------- %utt3 -----------------------------------
T1 - Test 1.--------------------------------------------------  [OK]    0.000ms
T2 - Test 2.--------------------------------------------------  [OK]    0.000ms

 ----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations---------------------------  [OK]    0.000ms

 ----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.---  [OK]    0.000ms
OLDSTYLE -  identify old style test indicator functionality..-  [OK]    0.000ms
OLDSTYL1 -  identify old style test indicator 2.--------------  [OK]    0.000ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
--------------------------------------------------------------  [FAIL]    0.000m
s
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
--------------------------------------------------------------  [FAIL]    0.000m
s
LEAKSOK - check leaks should be ok----------------------------  [OK]    0.000ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
--------------------------------------------------------------  [FAIL]    0.000m
s
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
--------------------------------------------------------------  [FAIL]    0.000m
s
ISUTEST - check ISUTEST inside unit test.---------------------  [OK]    0.000ms

 ----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......
 -------------------------------------------------------------  [OK]    0.000ms
CHKCMDLN - check command line processing of %utt5-------------  [OK]    0.000ms
CHKGUI - check GUI processing of %utt5------------------------  [OK]    0.000ms
CKGUISET - check list of tests returned by GUISET-------------  [OK]    0.000ms
NEWSTYLE - test return of valid new style or @TEST indicators...[OK]   10.000ms

 ---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...-------------------------------  [OK]    0.000ms
COVCOV - - check COVCOV - remove seen lines......-------------  [OK]    0.000ms
COVRPT...........---------------------------------------------  [OK]   10.000ms
COVRPTLS - - coverage report returning text in global...........[OK]   10.000ms
TRIMDATA - - TRIMDATA in %utcover..---------------------------  [OK]    0.000ms
LIST - - LIST in %utcover............-------------------------  [OK]    0.000ms
CACHECOV - - set up routine for analysis in globals..---------  [OK]   10.000ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............----------------------------------------  [OK]   10.000ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........------------------  [OK]    0.000ms

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5


 ----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.---  [OK]    0.000ms
OLDSTYLE -  identify old style test indicator functionality..-  [OK]    0.000ms
OLDSTYL1 -  identify old style test indicator 2.--------------  [OK]    0.000ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
--------------------------------------------------------------  [FAIL]    0.000m
s
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
--------------------------------------------------------------  [FAIL]   10.000m
s
LEAKSOK - check leaks should be ok----------------------------  [OK]    0.000ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
--------------------------------------------------------------  [FAIL]    0.000m
s
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
--------------------------------------------------------------  [FAIL]    0.000m
s
ISUTEST - check ISUTEST inside unit test.---------------------  [OK]    0.000ms

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr



 ---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...-------------------------------  [OK]    0.000ms
COVCOV - - check COVCOV - remove seen lines......-------------  [OK]    0.000ms
COVRPT...........---------------------------------------------  [OK]   10.000ms
COVRPTLS - - coverage report returning text in global...........[OK]   10.000ms
TRIMDATA - - TRIMDATA in %utcover..---------------------------  [OK]    0.000ms
LIST - - LIST in %utcover............-------------------------  [OK]   10.000ms
CACHECOV - - set up routine for analysis in globals..---------  [OK]   20.000ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............----------------------------------------  [OK]    0.000ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........------------------  [OK]    0.000ms

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6



 ----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......
 -------------------------------------------------------------  [OK]    0.000ms
CHKCMDLN - check command line processing of %utt5-------------  [OK]    0.000ms
CHKGUI - check GUI processing of %utt5------------------------  [OK]    0.000ms
CKGUISET - check list of tests returned by GUISET-------------  [OK]    0.000ms
NEWSTYLE - test return of valid new style or @TEST indicators...[OK]   10.000ms

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
Coventry ROU=VERBOSE3^%utt6

------------------- RUNNING VERBOSE^%utt1(3) -------------------


Running tests in VERBOSE mode with fractional millisecond timing


 ----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.--------------------------------  [OK]    0.000ms
T2 - - Make sure Set-up runs.---------------------------------  [OK]    0.000ms
T3 - - Make sure Teardown runs.-------------------------------  [OK]    0.000ms
T4 - Entry point using XTMENT.--------------------------------  [OK]    0.000ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.-------------------------------------------------------------  [FAIL]    0.000m
s
T6 - Succeed Entry Point...-----------------------------------  [OK]    0.000ms
T7 - Make sure we write to principal even though we are on another device..
 -------------------------------------------------------------  [OK]    0.000ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.---------------------------------------------------  [OK]   10.000ms
COVRPTGL - coverage report returning global....---------------  [OK]    0.000ms

 ----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.
 -------------------------------------------------------------  [OK]    0.000ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.-----------------------------------------------------------  [OK]    0.000ms

 ----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations---------------------------  [OK]    0.000ms

 ----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.---  [OK]   10.000ms
OLDSTYLE -  identify old style test indicator functionality..-  [OK]    0.000ms
OLDSTYL1 -  identify old style test indicator 2.--------------  [OK]    0.000ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
--------------------------------------------------------------  [FAIL]    0.000m
s
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
--------------------------------------------------------------  [FAIL]    0.000m
s
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
--------------------------------------------------------------  [FAIL]    0.000m
s
LEAKSOK - check leaks should be ok----------------------------  [OK]    0.000ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
--------------------------------------------------------------  [FAIL]    0.000m
s
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
--------------------------------------------------------------  [FAIL]    0.000m
s
ISUTEST - check ISUTEST inside unit test.---------------------  [OK]    0.000ms

 ----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......
 -------------------------------------------------------------  [OK]    0.000ms
CHKCMDLN - check command line processing of %utt5-------------  [OK]    0.000ms
CHKGUI - check GUI processing of %utt5------------------------  [OK]    0.000ms
CKGUISET - check list of tests returned by GUISET-------------  [OK]    0.000ms
NEWSTYLE - test return of valid new style or @TEST indicators...[OK]   10.000ms

 ---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...-------------------------------  [OK]    0.000ms
COVCOV - - check COVCOV - remove seen lines......-------------  [OK]    0.000ms
COVRPT...........---------------------------------------------  [OK]   10.000ms
COVRPTLS - - coverage report returning text in global...........[OK]   10.000ms
TRIMDATA - - TRIMDATA in %utcover..---------------------------  [OK]    0.000ms
LIST - - LIST in %utcover............-------------------------  [OK]    0.000ms
CACHECOV - - set up routine for analysis in globals..---------  [OK]   20.000ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............----------------------------------------  [OK]    0.000ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........------------------  [OK]    0.000ms

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.
Coventry ROU=VERBOSE^%utt1(3)

------------------- RUNNING VERBOSE^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut


 ----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.-----------------------------------------  [OK]
T2 - - Make sure Set-up runs.------------------------------------------  [OK]
T3 - - Make sure Teardown runs.----------------------------------------  [OK]
T4 - Entry point using XTMENT.-----------------------------------------  [OK]
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.----------------------------------------------------------------------  [FAIL]
T6 - Succeed Entry Point...--------------------------------------------  [OK]
T7 - Make sure we write to principal even though we are on another device..
 ----------------------------------------------------------------------  [OK]
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.------------------------------------------------------------  [OK]
COVRPTGL - coverage report returning global....------------------------  [OK]

 ----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.
 ----------------------------------------------------------------------  [OK]
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.--------------------------------------------------------------------  [OK]

 ----------------------------------- %utt3 -----------------------------------
T1 - Test 1.-----------------------------------------------------------  [OK]
T2 - Test 2.-----------------------------------------------------------  [OK]

 ----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations------------------------------------  [OK]

 ----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.------------  [OK]
OLDSTYLE -  identify old style test indicator functionality..----------  [OK]
OLDSTYL1 -  identify old style test indicator 2.-----------------------  [OK]
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
-----------------------------------------------------------------------  [FAIL]
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-----------------------------------------------------------------------  [FAIL]
LEAKSOK - check leaks should be ok-------------------------------------  [OK]
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-----------------------------------------------------------------------  [FAIL]
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-----------------------------------------------------------------------  [FAIL]
ISUTEST - check ISUTEST inside unit test.------------------------------  [OK]

 ----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......---  [OK]
CHKCMDLN - check command line processing of %utt5----------------------  [OK]
CHKGUI - check GUI processing of %utt5---------------------------------  [OK]
CKGUISET - check list of tests returned by GUISET----------------------  [OK]
NEWSTYLE - test return of valid new style or @TEST indicators...-------  [OK]

 ---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...----------------------------------------  [OK]
COVCOV - - check COVCOV - remove seen lines......----------------------  [OK]
COVRPT...........------------------------------------------------------  [OK]
COVRPTLS - - coverage report returning text in global...........-------  [OK]
TRIMDATA - - TRIMDATA in %utcover..------------------------------------  [OK]
LIST - - LIST in %utcover............----------------------------------  [OK]
CACHECOV - - set up routine for analysis in globals..------------------  [OK]
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............-------------------------------------------------  [OK]
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........---------------------------  [OK]

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5


 ----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.------------  [OK]
OLDSTYLE -  identify old style test indicator functionality..----------  [OK]
OLDSTYL1 -  identify old style test indicator 2.-----------------------  [OK]
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
-----------------------------------------------------------------------  [FAIL]
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-----------------------------------------------------------------------  [FAIL]
LEAKSOK - check leaks should be ok-------------------------------------  [OK]
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-----------------------------------------------------------------------  [FAIL]
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-----------------------------------------------------------------------  [FAIL]
ISUTEST - check ISUTEST inside unit test.------------------------------  [OK]

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr



 ---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...----------------------------------------  [OK]
COVCOV - - check COVCOV - remove seen lines......----------------------  [OK]
COVRPT...........------------------------------------------------------  [OK]
COVRPTLS - - coverage report returning text in global...........-------  [OK]
TRIMDATA - - TRIMDATA in %utcover..------------------------------------  [OK]
LIST - - LIST in %utcover............----------------------------------  [OK]
CACHECOV - - set up routine for analysis in globals..------------------  [OK]
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............-------------------------------------------------  [OK]
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........---------------------------  [OK]

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6



 ----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......---  [OK]
CHKCMDLN - check command line processing of %utt5----------------------  [OK]
CHKGUI - check GUI processing of %utt5---------------------------------  [OK]
CKGUISET - check list of tests returned by GUISET----------------------  [OK]
NEWSTYLE - test return of valid new style or @TEST indicators...-------  [OK]

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
Coventry ROU=VERBOSE^%utt6

------------------- RUNNING VERBOSE^%utt7 -------------------


Running tests in VERBOSE mode with fractional millisecond timing


 ----------------------------------- %utt7 -----------------------------------
T1 - - Make sure Start-up Ran.--------------------------------  [OK]    0.000ms
T5 - - ditto
T5^%utt7 - - ditto - This is an intentional failure
.
T5^%utt7 - - ditto - Intentionally throwing a failure
.-------------------------------------------------------------  [FAIL]    0.000m
s

 ----------------------------------- %utt1 -----------------------------------

 ----------------------------------- %utt2 -----------------------------------

 ----------------------------------- %utt4 -----------------------------------

 ----------------------------------- %utt5 -----------------------------------

 ----------------------------------- %utt6 -----------------------------------

 ---------------------------------- %uttcovr ----------------------------------

Ran 7 Routines, 2 Entry Tags
Checked 5 tests, with 2 failures and encountered 0 errors.
Coventry ROU=VERBOSE^%utt7

------------------- RUNNING ^%ut -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
Coventry ROU=^%ut

------------------- RUNNING ^%ut1 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
Coventry ROU=^%ut1

------------------- RUNNING ^%utcover -------------------
......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.
Coventry ROU=^%utcover

------------------- RUNNING ^%utt1 -------------------

Running tests in NON-VERBOSE mode
For Verbose mode use DO VERBOSE^%utt1(ARG) where ARG is an integer 1 to 3
ENTER RETURN TO CONTINUE: ....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.
Coventry ROU=^%utt1

------------------- RUNNING ^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
Coventry ROU=^%utt6

------------------- RUNNING ^%utt7 -------------------

Running tests in VERBOSE mode
ENTER RETURN TO CONTINUE: 

 ----------------------------------- %utt7 -----------------------------------
T1 - - Make sure Start-up Ran.--------------------------------  [OK]    0.000ms
T5 - - ditto
T5^%utt7 - - ditto - This is an intentional failure
.
T5^%utt7 - - ditto - Intentionally throwing a failure
.-------------------------------------------------------------  [FAIL]    0.000m
s

 ----------------------------------- %utt1 -----------------------------------

 ----------------------------------- %utt2 -----------------------------------

 ----------------------------------- %utt4 -----------------------------------

 ----------------------------------- %utt5 -----------------------------------

 ----------------------------------- %utt6 -----------------------------------

 ---------------------------------- %uttcovr ----------------------------------

Ran 7 Routines, 2 Entry Tags
Checked 5 tests, with 2 failures and encountered 0 errors.
Coventry ROU=^%utt7


------------ SUMMARY ------------
Ran 40 Routines, 163 Entry Tags
Checked 531 tests, with 25 failures and encountered 3 errors.


Routine %ut             (95.19%)   278 out of 292 lines covered
  - Detailed Breakdown
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   7 out of 7 lines covered
 Tag EN1^%ut               (94.12%)   64 out of 68 lines covered
   the following is a list of the lines **NOT** covered
     EN1+76   . . . I $$GETSYS()=0 S %utStart=$P($NOW(),",",2)
     EN1+77   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utStart=$s(V>6.2:$ZH,1:
0)
     EN1+88   . . . I $$GETSYS()=0 S %utEnd=$P($NOW(),",",2) S %utElapsed=(%utEn
d-%utStart)*1000,%utElapsed=%utElapsed_"ms"
     EN1+89   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utEnd=$s(V>6.2:$ZH,1:0)
 S %utElapsed=$$ZHDIF(%utStart,%utEnd)
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   12 out of 12 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   11 out of 11 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered
   the following is a list of the lines **NOT** covered
     ZHDIF+1   N SC0 S SC0=$P(%ZH0,",",2)
     ZHDIF+2   N SC1 S SC1=$P(%ZH1,",",2)
     ZHDIF+3   N DC0 S DC0=$P(%ZH0,",")*86400
     ZHDIF+4   N DC1 S DC1=$P(%ZH1,",")*86400
     ZHDIF+5   N MCS0 S MCS0=$P(%ZH0,",",3)/1000000
     ZHDIF+6   N MCS1 S MCS1=$P(%ZH1,",",3)/1000000
     ZHDIF+8   N T0 S T0=SC0+DC0+MCS0
     ZHDIF+9   N T1 S T1=SC1+DC1+MCS1
     ZHDIF+11   N %ZH2 S %ZH2=T1-T0*1000
     ZHDIF+12   QUIT %ZH2


Routine %ut1            (81.82%)   234 out of 286 lines covered
  - Detailed Breakdown
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
   the following is a list of the lines **NOT** covered
     CACHECOV+14   . . X "N %,%N S %N=0 X ""ZL @X F XCNP=XCNP+1:1 S %N=%N+1,%=$T
(+%N) Q:$L(%)=0  S @(DIF_XCNP_"""",0)"""")=%""" ; JLI see 160701 note in comment
s at top
     CACHECOV+15   . . Q
 Tag CHECKTAG^%ut1        (100.00%)   5 out of 5 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   17 out of 17 lines covered
 Tag CHKTAGS^%ut1         (100.00%)   10 out of 10 lines covered
 Tag COV^%ut1              (48.68%)   37 out of 76 lines covered
   the following is a list of the lines **NOT** covered
     COV+33   . N NMSP S NMSP=$G(NMSPS)
     COV+34   . D:NMSP]""  S NMSP="" F  S NMSP=$O(NMSPS(NMSP)) Q:NMSP=""  D
     COV+35   . . S NMSP1=NMSP I NMSP["*" S NMSP1=$P(NMSP,"*")
     COV+36   . . I $D(^$R(NMSP1)) S RTNS(NMSP1)=""
     COV+37   . . I NMSP["*" S RTN=NMSP1 F  S RTN=$O(^$R(RTN)) Q:RTN'[NMSP1  S R
TNS(RTN)=""
     COV+38   . . Q
     COV+39   . Q
     COV+50   . K ^TMP("%utCOVCOHORTSAV",$J)
     COV+51   . M ^TMP("%utCOVCOHORTSAV",$J)=^TMP("%utCOVCOHORT",$J)
     COV+52   . K ^TMP("%utCOVRESULT",$J)
     COV+53   . S ^TMP("%utcovrunning",$J)=1,%utcovxx=1
     COV+55   . I ($$GETSYS^%ut()=47) VIEW "TRACE":1:$NA(^TMP("%utCOVRESULT",$J)
)  ; GT.M START PROFILING
     COV+58   . . N NMSP,NMSPV S NMSP="",NMSPV="" F  S NMSPV=$O(RTNS(NMSPV)) Q:N
MSPV=""  S NMSP=NMSP_NMSPV_","
     COV+59   . . S NMSP=$E(NMSP,1,$L(NMSP)-1)
     COV+60   . . S STATUS=##class(%Monitor.System.LineByLine).Start($lb(NMSP),$
lb("RtnLine"),$lb($j))
     COV+61   . . I +STATUS'=1 D DecomposeStatus^%apiOBJ(STATUS,.ERR,"-d") F I=1
:1:ERR W ERR(I),!
     COV+62   . . I +STATUS'=1 K ERR S EXIT=1
     COV+63   . . Q
     COV+78   . I ($$GETSYS^%ut()=0) ; CACHE SPECIFIC
     COV+79   . K %utcovxx,^TMP("%utcovrunning",$J)
     COV+80   . Q
     COV+83   . I ($$GETSYS^%ut()=0) D  ; CACHE SPECIFIC CODE
     COV+84   . . S COVERSAV=$NA(^TMP("%utCOVCOHORTSAV",$J)) K @COVERSAV
     COV+85   . . S COVER=$NA(^TMP("%utCOVCOHORT",$J)) K @COVER
     COV+86   . . D CACHECOV(COVERSAV,COVER)
     COV+87   . . D TOTAGS(COVERSAV,0),TOTAGS(COVER,1)
     COV+88   . . D ##class(%Monitor.System.LineByLine).Stop()
     COV+89   . . Q
     COV+90   . D COVCOV($NA(^TMP("%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J
))) ; Venn diagram matching between globals
     COV+92   . I VERBOSITY=-1 D
     COV+93   . . K ^TMP("%utCOVREPORT",$J)
     COV+94   . . D COVRPTGL^%utcover($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("
%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J)),$NA(^TMP("%utCOVREPORT",$J)))
     COV+95   . . K ^TMP("%utCOVCOHORTSAV",$J),^TMP("%utCOVCOHORT",$J),^TMP("%ut
COVRESULT",$J) ; %utCOVREPORT contains the data for the user
     COV+96   . . Q
     COV+97   . E  D
     COV+98   . . D COVRPT($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("%utCOVCOHOR
T",$J)),$NA(^TMP("%utCOVRESULT",$J)),VERBOSITY)
     COV+99   . . K ^TMP("%utCOVCOHORTSAV",$J),^TMP("%utCOVCOHORT",$J),^TMP("%ut
COVRESULT",$J),^TMP("%utCOVREPORT",$J)
     COV+100   . . Q
     COV+101   . Q
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1           (0.00%)   0 out of 11 lines covered
   the following is a list of the lines **NOT** covered
     GETVALS+2   N LINE,MORE,ROUNAME,RSET,VAL,X
     GETVALS+4   S RSET=##class(%ResultSet).%New("%Monitor.System.LineByLine:Res
ult")
     GETVALS+5   S ROUNAME=##class(%Monitor.System.LineByLine).GetRoutineName(RO
UNUM)
     GETVALS+6   S LINE=RSET.Execute(ROUNAME)
     GETVALS+7   F LINE=1:1 S MORE=RSET.Next() Q:'MORE  D
     GETVALS+8   . S X=RSET.GetData(1)
     GETVALS+9   . S VAL=$LI(X,MTRICNUM)
     GETVALS+10   . S @GLOB@(ROUNAME,LINE,"C")=+VAL ; values are 0 if not seen, 
otherwises positive number
     GETVALS+11   . Q
     GETVALS+12   D RSET.Close()
     GETVALS+13   Q
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   108 out of 108 lines covered
  - Detailed Breakdown
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   14 out of 14 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut             (95.19%)   278 out of 292 lines covered
  - Summary
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   7 out of 7 lines covered
 Tag EN1^%ut               (94.12%)   64 out of 68 lines covered
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   12 out of 12 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   11 out of 11 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered


Routine %ut1            (81.82%)   234 out of 286 lines covered
  - Summary
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
 Tag CHECKTAG^%ut1        (100.00%)   5 out of 5 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   17 out of 17 lines covered
 Tag CHKTAGS^%ut1         (100.00%)   10 out of 10 lines covered
 Tag COV^%ut1              (48.68%)   37 out of 76 lines covered
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1           (0.00%)   0 out of 11 lines covered
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   108 out of 108 lines covered
  - Summary
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   14 out of 14 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut      (95.19%)   278 out of 292 lines covered
Routine %ut1      (81.82%)   234 out of 286 lines covered
Routine %utcover     (100.00%)   108 out of 108 lines covered


Overall Analysis 619 out of 685 lines covered (90% coverage)

GTM>

