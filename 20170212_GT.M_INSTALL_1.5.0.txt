The following capture shows the installation of M-Unit (MASH*1.5*0) on a GT.M 
system (version 6.2) running VistA.  Following installation, the unit tests for 
the package and coverage analysis were performed twice.  In GT.M when a routine 
is first run, any apparent problems are identified and listed as the routine is 
running.  These are the result of sections of code for Intersystems Cache being 
present which is not attempted to be run in a GT.M system.  The second capture 
which does not include this excess material is presented here.

The commands used are:
   D ^XUP    - used to perform the installation
   D ^%utt1  - this runs the unit tests showing periods for each passing test 
   D EN^%ut("%utt1",3) - runs unit tests with VERBOSITY	set to 3, this 
               causes each test to be listed with its result and at level 
               3 it lists execution time for each test in fractional 
               milliseconds
   D ^%uttcovr - runs detailed coverage analysis for the unit test routines 
                 with level set to 3, which lists coverage by routine, 
                 coverage by tag within routines, and within each routine lists 
                 by tag lines that were NOT covered
   
The example showing unit tests with a specification of verbosity set to 3, which 
normally shows execution times in fractions of a millisecond, shows only 
milliseconds since this capture was run in version 6.2 of GTM which does not 
support the fractional milliseconds. 


OSEHRA>D ^XUP

Setting up programmer environment
This is a TEST account.

Terminal Type set to: C-VT220

Select OPTION NAME: EVE
     1   EVE       Systems Manager Menu
     2   EVENT CAPTURE  ECX ECS MAINTENANCE     Event Capture
     3   EVENT CAPTURE (ECS) EXTRACT AU  ECX ECS SOURCE AUDIT     Event Capture 
(ECS) Extract Audit
     4   EVENT CAPTURE DATA ENTRY  ECENTER     Event Capture Data Entry
     5   EVENT CAPTURE EXTRACT  ECXEC     Event Capture Extract
Press <RETURN> to see more, '^' to exit this list, OR
CHOOSE 1-5: 1  EVE     Systems Manager Menu


          Core Applications ...
          Device Management ...
          Menu Management ...
          Programmer Options ...
          Operations Management ...
          Spool Management ...
          Information Security Officer Menu ...
          Taskman Management ...
          User Management ...
          Application Utilities ...
          Capacity Planning ...
          HL7 Main Menu ...

Select Systems Manager Menu <TEST ACCOUNT> Option: PROGrammer Options


   KIDS   Kernel Installation & Distribution System ...
   PG     Programmer mode
          Delete Unreferenced Options
          Error Processing ...
          Global Block Count
          Routine Tools ...

Select Programmer Options <TEST ACCOUNT> Option: KIDS  Kernel Installation & Dis
tribution System


          Edits and Distribution ...
          Utilities ...
          Installation ...
          Patch Monitor Main Menu ...

Select Kernel Installation & Distribution System <TEST ACCOUNT> Option: INSTalla
tion


   1      Load a Distribution
   2      Verify Checksums in Transport Global
   3      Print Transport Global
   4      Compare Transport Global to Current System
   5      Backup a Transport Global
   6      Install Package(s)
          Restart Install of Package(s)
          Unload a Distribution

Select Installation <TEST ACCOUNT> Option: LOAd a Distribution
Enter a Host File: /home/softhat/MASH_1.5_0.KID

KIDS Distribution saved on Feb 11, 2017@13:08:44
Comment: Updated M-Unit package

This Distribution contains Transport Globals for the following Package(s):
   MASH*1.5*0
Distribution OK!

Want to Continue with Load? YES// YES
Loading Distribution...

   MASH*1.5*0
Use INSTALL NAME: MASH*1.5*0 to install this Distribution.



   1      Load a Distribution
   2      Verify Checksums in Transport Global
   3      Print Transport Global
   4      Compare Transport Global to Current System
   5      Backup a Transport Global
   6      Install Package(s)
          Restart Install of Package(s)
          Unload a Distribution

Select Installation <TEST ACCOUNT> Option: 6  Install Package(s)
Select INSTALL NAME:    MASH*1.5*0     Loaded from Distribution    2/11/17@21:36
:29
     => Updated M-Unit package  ;Created on Feb 11, 2017@13:08:44

This Distribution was loaded on Feb 11, 2017@21:36:29 with header of 
   Updated M-Unit package  ;Created on Feb 11, 2017@13:08:44
   It consisted of the following Install(s):
     MASH*1.5*0
Checking Install for Package MASH*1.5*0

Install Questions for MASH*1.5*0

Incoming Files:


   17.9001   M-UNIT TEST GROUP  (including data)

Want KIDS to Rebuild Menu Trees Upon Completion of Install? NO// 


Want KIDS to INHIBIT LOGONs during the install? NO// 
Want to DISABLE Scheduled Options, Menu Options, and Protocols? NO// 

Enter the Device you want to print the Install messages.
You can queue the install by enter a 'Q' at the device prompt.
Enter a '^' to abort the install.

DEVICE: HOME//   TELNET
	 . D SAVE("$ZU(56,2)",$ZU(56,2))
	                       ^-----
		At column 24, line 37, source module /home/osehra/r/_ZTER.m
%GTM-E-INVFCN, Invalid function name
	 S ^TMP("XGD",$J,$PD,"PLATFORM")="ZEMULATION,KERNEL "_$$VERSION^XPDUTL("XU")
	                  ^-----
		At column 19, line 38, source module /home/osehra/r/XGSETUP.m
%GTM-E-INVSVN, Invalid special variable name
	 S:'$D(^TMP("XGD",$J,$PD,"FOCUS")) ^("FOCUS")=""
	                      ^-----
		At column 23, line 39, source module /home/osehra/r/XGSETUP.m
%GTM-E-INVSVN, Invalid special variable name
	 S:'$D(^TMP("XGD",$J,$PD,"UNITS")) ^("UNITS")="PIXEL"
	                      ^-----
		At column 23, line 40, source module /home/osehra/r/XGSETUP.m
%GTM-E-INVSVN, Invalid special variable name
	 I ^%ZOSF("OS")["DTM" U $I:VT=1 ;if DTM change to VT220 emulation
	                           ^-----
		At column 28, line 81, source module /home/osehra/r/XGSETUP.m
%GTM-E-DEVPARUNK, Deviceparameter unknown
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
             25             50             75               Complete
 
 Install Started for MASH*1.5*0 : 
               Feb 11, 2017@21:37:07
 
Build Distribution Date: Feb 11, 2017
 
 Installing Routines:[23;12H[0m(B[7m[0m(B[23;12H             25             50             75               [23;1H    0[9;22H[23;12H[0m(B[7m    [0m(B[23;16H         25             50             75               [23;1H    7[9;22H[23;12H[0m(B[7m         [0m(B[23;21H    25             50             75               [23;1H   15[9;22H		I $P($P($ZV,") ",2),"(")<2012 S NMSP=$ZU(5)
		                                      ^-----
		At column 40, line 30, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-INVFCN, Invalid function name
		I $P($P($ZV,") ",2),"(")>2011 S NMSP=$NAMESPACE
		                                      ^-----
		At column 40, line 31, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-INVSVN, Invalid special variable name
		ZN "%SYS" ; Go to SYS
		^-----
		At column 2, line 35, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-INVCMD, Invalid command keyword encountered
		N % S %=##Class(Config.Namespaces).Get(NMSP,.PROP) ; Get all namespace properties
		        ^-----
		At column 10, line 39, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-EXPR, Expression expected but not found
		I '% W !,"Error="_$SYSTEM.Status.GetErrorText(%) S $EC=",U-CONFIG-FAIL," QUIT
		                         ^-----
		At column 27, line 40, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-SPOREOL, Either a space or an end-of-line was expected but not found
		TRY {  ; try new style
		^-----
		At column 2, line 52, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-INVCMD, Invalid command keyword encountered
		  S %=##class(Config.Configuration).GetGlobalMapping(NMSP,"%ut*","",DBG,DBG)
		      ^-----
		At column 8, line 53, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-EXPR, Expression expected but not found
		}
		^-----
		At column 2, line 54, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-CMD, Command expected but not found
		CATCH {
		^-----
		At column 2, line 55, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-INVCMD, Invalid command keyword encountered
		}
		^-----
		At column 2, line 57, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-CMD, Command expected but not found
		I '% S %=##Class(Config.MapGlobals).Get(NMSP,"%ut*",.PROP) ; go back to original
		         ^-----
		At column 11, line 59, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-EXPR, Expression expected but not found
		TRY { ; try new style to add global mapping
		^-----
		At column 2, line 63, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-INVCMD, Invalid command keyword encountered
		  I '% S %=##class(Config.Configuration).AddGlobalMapping(NMSP,"%ut*","",DBG,DBG)
		           ^-----
		At column 13, line 64, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-EXPR, Expression expected but not found
		}
		^-----
		At column 2, line 65, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-CMD, Command expected but not found
		CATCH {
		^-----
		At column 2, line 66, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-INVCMD, Invalid command keyword encountered
		}
		^-----
		At column 2, line 68, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-CMD, Command expected but not found
		I '% S %=##Class(Config.MapGlobals).Create(NMSP,"%ut",.PROP) ; doesn't work with "%ut*"
		         ^-----
		At column 11, line 71, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-EXPR, Expression expected but not found
		I '% W !,"Error="_$SYSTEM.Status.GetErrorText(%) S $EC=",U-CONFIG-FAIL," QUIT
		                         ^-----
		At column 27, line 73, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-SPOREOL, Either a space or an end-of-line was expected but not found
		S %=##Class(Config.MapRoutines).Get(NMSP,"%ut*",.PROPRTN)
		    ^-----
		At column 6, line 78, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-EXPR, Expression expected but not found
		I '% S %=##Class(Config.MapRoutines).Create(NMSP,"%ut*",.PROPRTN)
		         ^-----
		At column 11, line 80, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-EXPR, Expression expected but not found
		I '% W !,"Error="_$SYSTEM.Status.GetErrorText(%) S $EC=",U-CONFIG-FAIL," QUIT
		                         ^-----
		At column 27, line 81, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-SPOREOL, Either a space or an end-of-line was expected but not found
		ZN NMSP ; Go back
		^-----
		At column 2, line 82, source module /home/osehra/p/ZZUTPRE.m
%GTM-E-INVCMD, Invalid command keyword encountered
[23;12H[0m(B[7m             25[0m(B[23;27H             50             75               [23;1H   25[9;22H		. . . I $$GETSYS()=0  S %utStart=$P($SYSTEM.Process.GetCPUTime(),",")+$P($SYSTEM.Process.GetCPUTime(),",",2)
		                                           ^-----
		At column 45, line 120, source module /home/osehra/p/ut.m
%GTM-E-COMMA, Comma expected in this context
		. . . I $$GETSYS()=0 S %utStart=$P($NOW(),",",2)
		                                    ^-----
		At column 38, line 124, source module /home/osehra/p/ut.m
%GTM-E-INVFCN, Invalid function name
		. . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utStart=$s(V>6.2:$ZH,1:0)
		                                                             ^-----
		At column 63, line 125, source module /home/osehra/p/ut.m
%GTM-E-INVSVN, Invalid special variable name
		. . . I $$GETSYS()=0  S %utEnd=$P($SYSTEM.Process.GetCPUTime(),",")+$P($SYSTEM.Process.GetCPUTime(),",",2)
		                                         ^-----
		At column 43, line 131, source module /home/osehra/p/ut.m
%GTM-E-COMMA, Comma expected in this context
		. . . I $$GETSYS()=0 S %utEnd=$P($NOW(),",",2) S %utElapsed=(%utEnd-%utStart)*1000,%utElapsed=%utElapsed_"ms"
		                                  ^-----
		At column 36, line 136, source module /home/osehra/p/ut.m
%GTM-E-INVFCN, Invalid function name
		. . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utEnd=$s(V>6.2:$ZH,1:0) S %utElapsed=$$ZHDIF(%utStart,%utEnd)
		                                                           ^-----
		At column 61, line 137, source module /home/osehra/p/ut.m
%GTM-E-INVSVN, Invalid special variable name
[23;12H[0m(B[7m             25    [0m(B[23;31H         50             75               [23;1H   32[9;22H		. . I $D(^$R(NMSP1)) S RTNS(NMSP1)=""
		          ^-----
		At column 12, line 170, source module /home/osehra/p/ut1.m
%GTM-E-GBLNAME, Either an identifier or a left parenthesis is expected after a ^ in this context
		. . I NMSP["*" S RTN=NMSP1 F  S RTN=$O(^$R(RTN)) Q:RTN'[NMSP1  S RTNS(RTN)=""
		                                        ^-----
		At column 42, line 171, source module /home/osehra/p/ut1.m
%GTM-E-GBLNAME, Either an identifier or a left parenthesis is expected after a ^ in this context
		. . S STATUS=##class(%Monitor.System.LineByLine).Start($lb(NMSP),$lb("RtnLine"),$lb($j))
		             ^-----
		At column 15, line 194, source module /home/osehra/p/ut1.m
%GTM-E-EXPR, Expression expected but not found
		. . D ##class(%Monitor.System.LineByLine).Stop()
		      ^-----
		At column 8, line 221, source module /home/osehra/p/ut1.m
%GTM-E-LABELEXPECTED, Label expected in this context
		I $D(^TMP("%utt4val",$J))!'$$ISUTEST() S ROUNUM=##class(%Monitor.System.LineByLine).GetRoutineCount(),METRICS=##class(%Monitor.System.LineByLine).GetMetrics(),METRICNT=$l(METRICS,",")
		                                                ^-----
		At column 50, line 237, source module /home/osehra/p/ut1.m
%GTM-E-EXPR, Expression expected but not found
		. I $D(^TMP("%utt4val",$J))!'$$ISUTEST() S ROUNAME=##class(%Monitor.System.LineByLine).GetRoutineName(I)
		                                                   ^-----
		At column 53, line 242, source module /home/osehra/p/ut1.m
%GTM-E-EXPR, Expression expected but not found
		S RSET=##class(%ResultSet).%New("%Monitor.System.LineByLine:Result")
		       ^-----
		At column 9, line 262, source module /home/osehra/p/ut1.m
%GTM-E-EXPR, Expression expected but not found
		S ROUNAME=##class(%Monitor.System.LineByLine).GetRoutineName(ROUNUM)
		          ^-----
		At column 12, line 263, source module /home/osehra/p/ut1.m
%GTM-E-EXPR, Expression expected but not found
		S LINE=RSET.Execute(ROUNAME)
		           ^-----
		At column 13, line 264, source module /home/osehra/p/ut1.m
%GTM-E-SPOREOL, Either a space or an end-of-line was expected but not found
		F LINE=1:1 S MORE=RSET.Next() Q:'MORE  D
		                      ^-----
		At column 24, line 265, source module /home/osehra/p/ut1.m
%GTM-E-SPOREOL, Either a space or an end-of-line was expected but not found
		. S X=RSET.GetData(1)
		          ^-----
		At column 12, line 266, source module /home/osehra/p/ut1.m
%GTM-E-SPOREOL, Either a space or an end-of-line was expected but not found
		. S VAL=$LI(X,MTRICNUM)
		         ^-----
		At column 11, line 267, source module /home/osehra/p/ut1.m
%GTM-E-INVFCN, Invalid function name
		D RSET.Close()
		      ^-----
		At column 8, line 270, source module /home/osehra/p/ut1.m
%GTM-E-SPOREOL, Either a space or an end-of-line was expected but not found
		. I $ZVERSION(1)=2 S D=$SYSTEM.Util.GetEnviron("temp")_"\test.txt" I 1 ; Windows
		     ^-----
		At column 7, line 101, source module /home/osehra/p/utt1.m
%GTM-E-INVFCN, Invalid function name
		. I $ZVERSION(1)=2 S D=$SYSTEM.Util.GetEnviron("temp")_"\test.txt" I 1 ; Windows
		                              ^-----
		At column 32, line 101, source module /home/osehra/p/utt1.m
%GTM-E-SPOREOL, Either a space or an end-of-line was expected but not found
		I $$GETSYS^%ut()=0 O D:"NWS" ; Cache new file
		                       ^-----
		At column 25, line 103, source module /home/osehra/p/utt1.m
%GTM-E-DEVPARUNK, Deviceparameter unknown
		I $$GETSYS^%ut()=0 O D:"R"
		                       ^-----
		At column 25, line 113, source module /home/osehra/p/utt1.m
%GTM-E-DEVPARUNK, Deviceparameter unknown
		I $$GETSYS^%ut()=0 C D:"D"
		                       ^-----
		At column 25, line 119, source module /home/osehra/p/utt1.m
%GTM-E-DEVPARUNK, Deviceparameter unknown
		. I $ZVERSION(1)=2 S D=$SYSTEM.Util.GetEnviron("temp")_"\test.txt" I 1 ; Windows
		     ^-----
		At column 7, line 138, source module /home/osehra/p/utt1.m
%GTM-E-INVFCN, Invalid function name
		. I $ZVERSION(1)=2 S D=$SYSTEM.Util.GetEnviron("temp")_"\test.txt" I 1 ; Windows
		                              ^-----
		At column 32, line 138, source module /home/osehra/p/utt1.m
%GTM-E-SPOREOL, Either a space or an end-of-line was expected but not found
		I $$GETSYS^%ut()=0 O D:"NWS" ; Cache new file
		                       ^-----
		At column 25, line 140, source module /home/osehra/p/utt1.m
%GTM-E-DEVPARUNK, Deviceparameter unknown
		I $$GETSYS^%ut()=0 O D:"R" ; Cache read only
		                       ^-----
		At column 25, line 146, source module /home/osehra/p/utt1.m
%GTM-E-DEVPARUNK, Deviceparameter unknown
		I $$GETSYS^%ut()=0 C D:"D"
		                       ^-----
		At column 25, line 150, source module /home/osehra/p/utt1.m
%GTM-E-DEVPARUNK, Deviceparameter unknown
		S X= ; syntax error on purpose
		    ^-----
		At column 6, line 50, source module /home/osehra/p/utt5.m
%GTM-E-EXPR, Expression expected but not found
 
 Running Pre-Install Routine: ^ZZUTPRE
 
 Installing Data Dictionaries:
               Feb 11, 2017@21:37:08
 
 Installing Data: 
               Feb 11, 2017@21:37:08
 
 Installing PACKAGE COMPONENTS: 
 
 Installing REMOTE PROCEDURE
 
 Installing OPTION
               Feb 11, 2017@21:37:10
 
 Running Post-Install Routine: ^ZZUTPOST
Routine:       ut Loaded, Saved as      %ut
 
Routine:      ut1 Loaded, Saved as     %ut1
 
Routine:  utcover Loaded, Saved as %utcover
 
Routine:     utt1 Loaded, Saved as    %utt1
 
Routine:     utt2 Loaded, Saved as    %utt2
 
Routine:     utt3 Loaded, Saved as    %utt3
 
Routine:     utt4 Loaded, Saved as    %utt4
 
Routine:     utt5 Loaded, Saved as    %utt5
 
Routine:     utt6 Loaded, Saved as    %utt6
 
Routine:  uttcovr Loaded, Saved as %uttcovr
 
 
 Updating Routine file
 
 Updating KIDS files...
 
 MASH*1.5*0 Installed. 
               Feb 11, 2017@21:37:10
 
 NO Install Message sent

Install Completed


   1      Load a Distribution
   2      Verify Checksums in Transport Global
   3      Print Transport Global
   4      Compare Transport Global to Current System
   5      Backup a Transport Global
   6      Install Package(s)
          Restart Install of Package(s)
          Unload a Distribution

Select Installation <TEST ACCOUNT> Option: ^PG   Programmer mode
%GTM-I-BREAK, Break instruction encountered
		At M source location PRGMODE+6^%ZOSV

OSEHRA>

OSEHRA>D ^%utt1

Running tests in NON-VERBOSE mode
For Verbose mode use DO VERBOSE^%utt1(ARG) where ARG is an integer 1 to 3
ENTER RETURN TO CONTINUE: ....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.
OSEHRA>

OSEHRA>D EN^%ut("%utt1",3)


----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.-------------------------------------  [OK] 0ms
T2 - - Make sure Set-up runs.--------------------------------------  [OK] 0ms
T3 - - Make sure Teardown runs.------------------------------------  [OK] 0ms
T4 - Entry point using XTMENT.-------------------------------------  [OK] 0ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.------------------------------------------------------------------  [FAIL] 0ms
T6 - Succeed Entry Point...----------------------------------------  [OK] 0ms
T7 - Make sure we write to principal even though we are on another device..[OK] 
0ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.--------------------------------------------------------  [OK] 0ms
COVRPTGL - coverage report returning global....--------------------  [OK] 0ms

----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.[OK]
 0ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.----------------------------------------------------------------  [OK] 0ms

----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations--------------------------------  [OK] 0ms

----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.--------  [OK] 0ms
OLDSTYLE -  identify old style test indicator functionality..------  [OK] 0ms
OLDSTYL1 -  identify old style test indicator 2.-------------------  [OK] 0ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
-------------------------------------------------------------------  [FAIL] 0ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-------------------------------------------------------------------  [FAIL] 0ms
LEAKSOK - check leaks should be ok---------------------------------  [OK] 0ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-------------------------------------------------------------------  [FAIL] 0ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-------------------------------------------------------------------  [FAIL] 0ms
ISUTEST - check ISUTEST inside unit test.--------------------------  [OK] 0ms

----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude...... [OK] 0ms
CHKCMDLN - check command line processing of %utt5------------------  [OK] 0ms
CHKGUI - check GUI processing of %utt5-----------------------------  [OK] 0ms
CKGUISET - check list of tests returned by GUISET------------------  [OK] 0ms
NEWSTYLE - test return of valid new style or @TEST indicators...---  [OK] 0ms

---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...------------------------------------  [OK] 0ms
COVCOV - - check COVCOV - remove seen lines......-----------------  [OK] 10ms
COVRPT...........-------------------------------------------------  [OK] 10ms
COVRPTLS - - coverage report returning text in global...........--  [OK] 10ms
TRIMDATA - - TRIMDATA in %utcover..--------------------------------  [OK] 0ms
LIST - - LIST in %utcover............------------------------------  [OK] 0ms
CACHECOV - - set up routine for analysis in globals..-------------  [OK] 30ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............---------------------------------------------  [OK] 0ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........-----------------------  [OK] 0ms

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.
OSEHRA>

OSEHRA>

OSEHRA>

OSEHRA>D ^%uttcovr

Loading routines to test coverage...
%ut %ut1 %utcover %utt1 %utt2 %utt3 %utt4 %utt5 %utt6 %uttcovr 

------------------- RUNNING %uttcovr -------------------
......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ENTRY^%uttcovr -------------------

LEAKSBAD TEST - X NOT SPECIFIED VARIABLE LEAK: X
xxxxxxxxxxxxxxxxxxxx GOING TO COV^%ut FOR %utt5 at 3



Loading routines to test coverage...
%ut1 ....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.
xxxxxxxxxxxxxxxxxxxx GOING TO COV^%ut FOR %utt5 at -1



Loading routines to test coverage...
%ut1 ....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.
xxxxxxxxxxxxxxxxxxxx GOING TO MULTAPIS for %utt4 and %ut




------------------- RUNNING ^%ut -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%utt4 -------------------


----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations------------------------------------  [OK]

Ran 1 Routine, 1 Entry Tag
Checked 0 test, with 0 failures and encountered 0 errors.


------------ SUMMARY ------------
Ran 2 Routines, 6 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.
xxxxxxxxxxxxxxxxxxxx GOING TO COVERAGE for %utt4 and %ut at 3



Loading routines to test coverage...
%ut %ut1 %utcover %utt1 %utt2 %utt3 %utt4 %utt5 %utt6 %uttcovr 

------------------- RUNNING ^%ut -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%utt4 -------------------


----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations------------------------------------  [OK]

Ran 1 Routine, 1 Entry Tag
Checked 0 test, with 0 failures and encountered 0 errors.


------------ SUMMARY ------------
Ran 2 Routines, 6 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.


Routine %ut             (95.10%)   272 out of 286 lines covered
  - Detailed Breakdown
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut               (93.85%)   61 out of 65 lines covered
   the following is a list of the lines **NOT** covered
     EN1+72   . . . I $$GETSYS()=0 S %utStart=$P($NOW(),",",2)
     EN1+73   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utStart=$s(V>6.2:$ZH,1:
0)
     EN1+84   . . . I $$GETSYS()=0 S %utEnd=$P($NOW(),",",2) S %utElapsed=(%utEn
d-%utStart)*1000,%utElapsed=%utElapsed_"ms"
     EN1+85   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utEnd=$s(V>6.2:$ZH,1:0)
 S %utElapsed=$$ZHDIF(%utStart,%utEnd)
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered
   the following is a list of the lines **NOT** covered
     ZHDIF+1   N SC0 S SC0=$P(%ZH0,",",2)
     ZHDIF+2   N SC1 S SC1=$P(%ZH1,",",2)
     ZHDIF+3   N DC0 S DC0=$P(%ZH0,",")*86400
     ZHDIF+4   N DC1 S DC1=$P(%ZH1,",")*86400
     ZHDIF+5   N MCS0 S MCS0=$P(%ZH0,",",3)/1000000
     ZHDIF+6   N MCS1 S MCS1=$P(%ZH1,",",3)/1000000
     ZHDIF+8   N T0 S T0=SC0+DC0+MCS0
     ZHDIF+9   N T1 S T1=SC1+DC1+MCS1
     ZHDIF+11   N %ZH2 S %ZH2=T1-T0*1000
     ZHDIF+12   QUIT %ZH2_"ms"


Routine %ut1            (82.16%)   221 out of 269 lines covered
  - Detailed Breakdown
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
   the following is a list of the lines **NOT** covered
     CACHECOV+14   . . X "N %,%N S %N=0 X ""ZL @X F XCNP=XCNP+1:1 S %N=%N+1,%=$T
(+%N) Q:$L(%)=0  S @(DIF_XCNP_"""",0)"""")=%""" ; JLI see 160701 note in comment
s at top
     CACHECOV+15   . . Q
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
   the following is a list of the lines **NOT** covered
     COV+35   . N NMSP S NMSP=$G(NMSPS)
     COV+36   . D:NMSP]""  S NMSP="" F  S NMSP=$O(NMSPS(NMSP)) Q:NMSP=""  D
     COV+37   . . S NMSP1=NMSP I NMSP["*" S NMSP1=$P(NMSP,"*")
     COV+38   . . I $D(^$R(NMSP1)) S RTNS(NMSP1)=""
     COV+39   . . I NMSP["*" S RTN=NMSP1 F  S RTN=$O(^$R(RTN)) Q:RTN'[NMSP1  S R
TNS(RTN)=""
     COV+40   . . Q
     COV+41   . Q
     COV+52   . K ^TMP("%utCOVCOHORTSAV",$J)
     COV+53   . M ^TMP("%utCOVCOHORTSAV",$J)=^TMP("%utCOVCOHORT",$J)
     COV+54   . K ^TMP("%utCOVRESULT",$J)
     COV+55   . S ^TMP("%utcovrunning",$J)=1,%utcovxx=1
     COV+57   . I ($$GETSYS^%ut()=47) VIEW "TRACE":1:$NA(^TMP("%utCOVRESULT",$J)
)  ; GT.M START PROFILING
     COV+60   . . N NMSP,NMSPV S NMSP="",NMSPV="" F  S NMSPV=$O(RTNS(NMSPV)) Q:N
MSPV=""  S NMSP=NMSP_NMSPV_","
     COV+61   . . S NMSP=$E(NMSP,1,$L(NMSP)-1)
     COV+62   . . S STATUS=##class(%Monitor.System.LineByLine).Start($lb(NMSP),$
lb("RtnLine"),$lb($j))
     COV+63   . . I +STATUS'=1 D DecomposeStatus^%apiOBJ(STATUS,.ERR,"-d") F I=1
:1:ERR W ERR(I),!
     COV+64   . . I +STATUS'=1 K ERR S EXIT=1
     COV+65   . . Q
     COV+79   . I ($$GETSYS^%ut()=0) ; CACHE SPECIFIC
     COV+80   . K %utcovxx,^TMP("%utcovrunning",$J)
     COV+81   . Q
     COV+84   . I ($$GETSYS^%ut()=0) D  ; CACHE SPECIFIC CODE
     COV+85   . . S COVERSAV=$NA(^TMP("%utCOVCOHORTSAV",$J)) K @COVERSAV
     COV+86   . . S COVER=$NA(^TMP("%utCOVCOHORT",$J)) K @COVER
     COV+87   . . D CACHECOV(COVERSAV,COVER)
     COV+88   . . D TOTAGS(COVERSAV,0),TOTAGS(COVER,1)
     COV+89   . . D ##class(%Monitor.System.LineByLine).Stop()
     COV+90   . . Q
     COV+91   . D COVCOV($NA(^TMP("%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J
))) ; Venn diagram matching between globals
     COV+93   . I VERBOSITY=-1 D
     COV+94   . . K ^TMP("%utCOVREPORT",$J)
     COV+95   . . D COVRPTGL^%utcover($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("
%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J)),$NA(^TMP("%utCOVREPORT",$J)))
     COV+96   . . Q
     COV+97   . E  D COVRPT($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("%utCOVCOHO
RT",$J)),$NA(^TMP("%utCOVRESULT",$J)),VERBOSITY)
     COV+98   . Q
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1           (0.00%)   0 out of 11 lines covered
   the following is a list of the lines **NOT** covered
     GETVALS+2   N LINE,MORE,ROUNAME,RSET,VAL,X
     GETVALS+4   S RSET=##class(%ResultSet).%New("%Monitor.System.LineByLine:Res
ult")
     GETVALS+5   S ROUNAME=##class(%Monitor.System.LineByLine).GetRoutineName(RO
UNUM)
     GETVALS+6   S LINE=RSET.Execute(ROUNAME)
     GETVALS+7   F LINE=1:1 S MORE=RSET.Next() Q:'MORE  D
     GETVALS+8   . S X=RSET.GetData(1)
     GETVALS+9   . S VAL=$LI(X,MTRICNUM)
     GETVALS+10   . S @GLOB@(ROUNAME,LINE,"C")=+VAL ; values are 0 if not seen, 
otherwises positive number
     GETVALS+11   . Q
     GETVALS+12   D RSET.Close()
     GETVALS+13   Q
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Detailed Breakdown
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut             (95.10%)   272 out of 286 lines covered
  - Summary
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut               (93.85%)   61 out of 65 lines covered
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered


Routine %ut1            (82.16%)   221 out of 269 lines covered
  - Summary
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1           (0.00%)   0 out of 11 lines covered
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Summary
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut      (95.10%)   272 out of 286 lines covered
Routine %ut1      (82.16%)   221 out of 269 lines covered
Routine %utcover     (100.00%)   107 out of 107 lines covered


Overall Analysis 600 out of 662 lines covered (90% coverage)
xxxxxxxxxxxxxxxxxxxx LISTING DATA VIA LIST





Routine %ut             (95.10%)   272 out of 286 lines covered
  - Detailed Breakdown
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut               (93.85%)   61 out of 65 lines covered
   the following is a list of the lines **NOT** covered
     EN1+72   . . . I $$GETSYS()=0 S %utStart=$P($NOW(),",",2)
     EN1+73   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utStart=$s(V>6.2:$ZH,1:
0)
     EN1+84   . . . I $$GETSYS()=0 S %utEnd=$P($NOW(),",",2) S %utElapsed=(%utEn
d-%utStart)*1000,%utElapsed=%utElapsed_"ms"
     EN1+85   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utEnd=$s(V>6.2:$ZH,1:0)
 S %utElapsed=$$ZHDIF(%utStart,%utEnd)
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered
   the following is a list of the lines **NOT** covered
     ZHDIF+1   N SC0 S SC0=$P(%ZH0,",",2)
     ZHDIF+2   N SC1 S SC1=$P(%ZH1,",",2)
     ZHDIF+3   N DC0 S DC0=$P(%ZH0,",")*86400
     ZHDIF+4   N DC1 S DC1=$P(%ZH1,",")*86400
     ZHDIF+5   N MCS0 S MCS0=$P(%ZH0,",",3)/1000000
     ZHDIF+6   N MCS1 S MCS1=$P(%ZH1,",",3)/1000000
     ZHDIF+8   N T0 S T0=SC0+DC0+MCS0
     ZHDIF+9   N T1 S T1=SC1+DC1+MCS1
     ZHDIF+11   N %ZH2 S %ZH2=T1-T0*1000
     ZHDIF+12   QUIT %ZH2_"ms"


Routine %ut1            (82.16%)   221 out of 269 lines covered
  - Detailed Breakdown
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
   the following is a list of the lines **NOT** covered
     CACHECOV+14   . . X "N %,%N S %N=0 X ""ZL @X F XCNP=XCNP+1:1 S %N=%N+1,%=$T
(+%N) Q:$L(%)=0  S @(DIF_XCNP_"""",0)"""")=%""" ; JLI see 160701 note in comment
s at top
     CACHECOV+15   . . Q
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
   the following is a list of the lines **NOT** covered
     COV+35   . N NMSP S NMSP=$G(NMSPS)
     COV+36   . D:NMSP]""  S NMSP="" F  S NMSP=$O(NMSPS(NMSP)) Q:NMSP=""  D
     COV+37   . . S NMSP1=NMSP I NMSP["*" S NMSP1=$P(NMSP,"*")
     COV+38   . . I $D(^$R(NMSP1)) S RTNS(NMSP1)=""
     COV+39   . . I NMSP["*" S RTN=NMSP1 F  S RTN=$O(^$R(RTN)) Q:RTN'[NMSP1  S R
TNS(RTN)=""
     COV+40   . . Q
     COV+41   . Q
     COV+52   . K ^TMP("%utCOVCOHORTSAV",$J)
     COV+53   . M ^TMP("%utCOVCOHORTSAV",$J)=^TMP("%utCOVCOHORT",$J)
     COV+54   . K ^TMP("%utCOVRESULT",$J)
     COV+55   . S ^TMP("%utcovrunning",$J)=1,%utcovxx=1
     COV+57   . I ($$GETSYS^%ut()=47) VIEW "TRACE":1:$NA(^TMP("%utCOVRESULT",$J)
)  ; GT.M START PROFILING
     COV+60   . . N NMSP,NMSPV S NMSP="",NMSPV="" F  S NMSPV=$O(RTNS(NMSPV)) Q:N
MSPV=""  S NMSP=NMSP_NMSPV_","
     COV+61   . . S NMSP=$E(NMSP,1,$L(NMSP)-1)
     COV+62   . . S STATUS=##class(%Monitor.System.LineByLine).Start($lb(NMSP),$
lb("RtnLine"),$lb($j))
     COV+63   . . I +STATUS'=1 D DecomposeStatus^%apiOBJ(STATUS,.ERR,"-d") F I=1
:1:ERR W ERR(I),!
     COV+64   . . I +STATUS'=1 K ERR S EXIT=1
     COV+65   . . Q
     COV+79   . I ($$GETSYS^%ut()=0) ; CACHE SPECIFIC
     COV+80   . K %utcovxx,^TMP("%utcovrunning",$J)
     COV+81   . Q
     COV+84   . I ($$GETSYS^%ut()=0) D  ; CACHE SPECIFIC CODE
     COV+85   . . S COVERSAV=$NA(^TMP("%utCOVCOHORTSAV",$J)) K @COVERSAV
     COV+86   . . S COVER=$NA(^TMP("%utCOVCOHORT",$J)) K @COVER
     COV+87   . . D CACHECOV(COVERSAV,COVER)
     COV+88   . . D TOTAGS(COVERSAV,0),TOTAGS(COVER,1)
     COV+89   . . D ##class(%Monitor.System.LineByLine).Stop()
     COV+90   . . Q
     COV+91   . D COVCOV($NA(^TMP("%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J
))) ; Venn diagram matching between globals
     COV+93   . I VERBOSITY=-1 D
     COV+94   . . K ^TMP("%utCOVREPORT",$J)
     COV+95   . . D COVRPTGL^%utcover($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("
%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J)),$NA(^TMP("%utCOVREPORT",$J)))
     COV+96   . . Q
     COV+97   . E  D COVRPT($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("%utCOVCOHO
RT",$J)),$NA(^TMP("%utCOVRESULT",$J)),VERBOSITY)
     COV+98   . Q
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1           (0.00%)   0 out of 11 lines covered
   the following is a list of the lines **NOT** covered
     GETVALS+2   N LINE,MORE,ROUNAME,RSET,VAL,X
     GETVALS+4   S RSET=##class(%ResultSet).%New("%Monitor.System.LineByLine:Res
ult")
     GETVALS+5   S ROUNAME=##class(%Monitor.System.LineByLine).GetRoutineName(RO
UNUM)
     GETVALS+6   S LINE=RSET.Execute(ROUNAME)
     GETVALS+7   F LINE=1:1 S MORE=RSET.Next() Q:'MORE  D
     GETVALS+8   . S X=RSET.GetData(1)
     GETVALS+9   . S VAL=$LI(X,MTRICNUM)
     GETVALS+10   . S @GLOB@(ROUNAME,LINE,"C")=+VAL ; values are 0 if not seen, 
otherwises positive number
     GETVALS+11   . Q
     GETVALS+12   D RSET.Close()
     GETVALS+13   Q
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Detailed Breakdown
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut             (95.10%)   272 out of 286 lines covered
  - Summary
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut               (93.85%)   61 out of 65 lines covered
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered


Routine %ut1            (82.16%)   221 out of 269 lines covered
  - Summary
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1           (0.00%)   0 out of 11 lines covered
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Summary
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut      (95.10%)   272 out of 286 lines covered
Routine %ut1      (82.16%)   221 out of 269 lines covered
Routine %utcover     (100.00%)   107 out of 107 lines covered


Overall Analysis 600 out of 662 lines covered (90% coverage)
xxxxxxxxxxxxxxxxxxxx Finished in ENTRY^%uttcovr




------------------- RUNNING VERBOSE2^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut


----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.-------------------------------------  [OK] 0ms
T2 - - Make sure Set-up runs.--------------------------------------  [OK] 0ms
T3 - - Make sure Teardown runs.------------------------------------  [OK] 0ms
T4 - Entry point using XTMENT.------------------------------------  [OK] 10ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.------------------------------------------------------------------  [FAIL] 0ms
T6 - Succeed Entry Point...----------------------------------------  [OK] 0ms
T7 - Make sure we write to principal even though we are on another device..[OK] 
0ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.-------------------------------------------------------  [OK] 10ms
COVRPTGL - coverage report returning global....--------------------  [OK] 0ms

----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.[OK]
 0ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.----------------------------------------------------------------  [OK] 0ms

----------------------------------- %utt3 -----------------------------------
T1 - Test 1.-------------------------------------------------------  [OK] 0ms
T2 - Test 2.-------------------------------------------------------  [OK] 0ms

----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations--------------------------------  [OK] 0ms

----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.--------  [OK] 0ms
OLDSTYLE -  identify old style test indicator functionality..------  [OK] 0ms
OLDSTYL1 -  identify old style test indicator 2.-------------------  [OK] 0ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
-------------------------------------------------------------------  [FAIL] 0ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-------------------------------------------------------------------  [FAIL] 0ms
LEAKSOK - check leaks should be ok---------------------------------  [OK] 0ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-------------------------------------------------------------------  [FAIL] 0ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-------------------------------------------------------------------  [FAIL] 0ms
ISUTEST - check ISUTEST inside unit test.--------------------------  [OK] 0ms

----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude...... [OK] 0ms
CHKCMDLN - check command line processing of %utt5------------------  [OK] 0ms
CHKGUI - check GUI processing of %utt5-----------------------------  [OK] 0ms
CKGUISET - check list of tests returned by GUISET------------------  [OK] 0ms
NEWSTYLE - test return of valid new style or @TEST indicators...--  [OK] 10ms

---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...------------------------------------  [OK] 0ms
COVCOV - - check COVCOV - remove seen lines......------------------  [OK] 0ms
COVRPT...........-------------------------------------------------  [OK] 20ms
COVRPTLS - - coverage report returning text in global...........--  [OK] 20ms
TRIMDATA - - TRIMDATA in %utcover..--------------------------------  [OK] 0ms
LIST - - LIST in %utcover............------------------------------  [OK] 0ms
CACHECOV - - set up routine for analysis in globals..-------------  [OK] 30ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............---------------------------------------------  [OK] 0ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........----------------------  [OK] 10ms

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5


----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.--------  [OK] 0ms
OLDSTYLE -  identify old style test indicator functionality..------  [OK] 0ms
OLDSTYL1 -  identify old style test indicator 2.-------------------  [OK] 0ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
-------------------------------------------------------------------  [FAIL] 0ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-------------------------------------------------------------------  [FAIL] 0ms
LEAKSOK - check leaks should be ok---------------------------------  [OK] 0ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-------------------------------------------------------------------  [FAIL] 0ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-------------------------------------------------------------------  [FAIL] 0ms
ISUTEST - check ISUTEST inside unit test.--------------------------  [OK] 0ms

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr



---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...------------------------------------  [OK] 0ms
COVCOV - - check COVCOV - remove seen lines......-----------------  [OK] 10ms
COVRPT...........-------------------------------------------------  [OK] 20ms
COVRPTLS - - coverage report returning text in global...........--  [OK] 20ms
TRIMDATA - - TRIMDATA in %utcover..--------------------------------  [OK] 0ms
LIST - - LIST in %utcover............-----------------------------  [OK] 10ms
CACHECOV - - set up routine for analysis in globals..-------------  [OK] 30ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............---------------------------------------------  [OK] 0ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........-----------------------  [OK] 0ms

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6



----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......[OK] 10ms
CHKCMDLN - check command line processing of %utt5------------------  [OK] 0ms
CHKGUI - check GUI processing of %utt5-----------------------------  [OK] 0ms
CKGUISET - check list of tests returned by GUISET------------------  [OK] 0ms
NEWSTYLE - test return of valid new style or @TEST indicators...---  [OK] 0ms

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING VERBOSE3^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut


----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.-------------------------------------  [OK] 0ms
T2 - - Make sure Set-up runs.--------------------------------------  [OK] 0ms
T3 - - Make sure Teardown runs.------------------------------------  [OK] 0ms
T4 - Entry point using XTMENT.-------------------------------------  [OK] 0ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.------------------------------------------------------------------  [FAIL] 0ms
T6 - Succeed Entry Point...----------------------------------------  [OK] 0ms
T7 - Make sure we write to principal even though we are on another device..[OK] 
0ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.-------------------------------------------------------  [OK] 10ms
COVRPTGL - coverage report returning global....-------------------  [OK] 20ms

----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.[OK]
 0ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.----------------------------------------------------------------  [OK] 0ms

----------------------------------- %utt3 -----------------------------------
T1 - Test 1.-------------------------------------------------------  [OK] 0ms
T2 - Test 2.-------------------------------------------------------  [OK] 0ms

----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations--------------------------------  [OK] 0ms

----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.--------  [OK] 0ms
OLDSTYLE -  identify old style test indicator functionality..------  [OK] 0ms
OLDSTYL1 -  identify old style test indicator 2.-------------------  [OK] 0ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
-------------------------------------------------------------------  [FAIL] 0ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-------------------------------------------------------------------  [FAIL] 0ms
LEAKSOK - check leaks should be ok---------------------------------  [OK] 0ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-------------------------------------------------------------------  [FAIL] 0ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-------------------------------------------------------------------  [FAIL] 0ms
ISUTEST - check ISUTEST inside unit test.--------------------------  [OK] 0ms

----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude...... [OK] 0ms
CHKCMDLN - check command line processing of %utt5------------------  [OK] 0ms
CHKGUI - check GUI processing of %utt5-----------------------------  [OK] 0ms
CKGUISET - check list of tests returned by GUISET------------------  [OK] 0ms
NEWSTYLE - test return of valid new style or @TEST indicators...--  [OK] 10ms

---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...------------------------------------  [OK] 0ms
COVCOV - - check COVCOV - remove seen lines......-----------------  [OK] 10ms
COVRPT...........-------------------------------------------------  [OK] 10ms
COVRPTLS - - coverage report returning text in global...........--  [OK] 10ms
TRIMDATA - - TRIMDATA in %utcover..--------------------------------  [OK] 0ms
LIST - - LIST in %utcover............-----------------------------  [OK] 10ms
CACHECOV - - set up routine for analysis in globals..-------------  [OK] 30ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............---------------------------------------------  [OK] 0ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........-----------------------  [OK] 0ms

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5


----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.--------  [OK] 0ms
OLDSTYLE -  identify old style test indicator functionality..------  [OK] 0ms
OLDSTYL1 -  identify old style test indicator 2.-------------------  [OK] 0ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
-------------------------------------------------------------------  [FAIL] 0ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-------------------------------------------------------------------  [FAIL] 0ms
LEAKSOK - check leaks should be ok---------------------------------  [OK] 0ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-------------------------------------------------------------------  [FAIL] 0ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-------------------------------------------------------------------  [FAIL] 0ms
ISUTEST - check ISUTEST inside unit test.--------------------------  [OK] 0ms

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr



---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...------------------------------------  [OK] 0ms
COVCOV - - check COVCOV - remove seen lines......------------------  [OK] 0ms
COVRPT...........-------------------------------------------------  [OK] 20ms
COVRPTLS - - coverage report returning text in global...........--  [OK] 20ms
TRIMDATA - - TRIMDATA in %utcover..--------------------------------  [OK] 0ms
LIST - - LIST in %utcover............------------------------------  [OK] 0ms
CACHECOV - - set up routine for analysis in globals..-------------  [OK] 40ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............---------------------------------------------  [OK] 0ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........----------------------  [OK] 20ms

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6



----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude...... [OK] 0ms
CHKCMDLN - check command line processing of %utt5------------------  [OK] 0ms
CHKGUI - check GUI processing of %utt5-----------------------------  [OK] 0ms
CKGUISET - check list of tests returned by GUISET------------------  [OK] 0ms
NEWSTYLE - test return of valid new style or @TEST indicators...--  [OK] 10ms

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING VERBOSE^%utt1(3) -------------------


Running tests in VERBOSE mode with fractional millisecond timing


----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.-------------------------------------  [OK] 0ms
T2 - - Make sure Set-up runs.-------------------------------------  [OK] 10ms
T3 - - Make sure Teardown runs.------------------------------------  [OK] 0ms
T4 - Entry point using XTMENT.-------------------------------------  [OK] 0ms
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.------------------------------------------------------------------  [FAIL] 0ms
T6 - Succeed Entry Point...----------------------------------------  [OK] 0ms
T7 - Make sure we write to principal even though we are on another device..[OK] 
0ms
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.--------------------------------------------------------  [OK] 0ms
COVRPTGL - coverage report returning global....-------------------  [OK] 10ms

----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.[OK]
 0ms
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.----------------------------------------------------------------  [OK] 0ms

----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations--------------------------------  [OK] 0ms

----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.--------  [OK] 0ms
OLDSTYLE -  identify old style test indicator functionality..------  [OK] 0ms
OLDSTYL1 -  identify old style test indicator 2.-------------------  [OK] 0ms
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
------------------------------------------------------------------  [FAIL] 10ms
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-------------------------------------------------------------------  [FAIL] 0ms
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
-------------------------------------------------------------------  [FAIL] 0ms
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-------------------------------------------------------------------  [FAIL] 0ms
LEAKSOK - check leaks should be ok---------------------------------  [OK] 0ms
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-------------------------------------------------------------------  [FAIL] 0ms
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-------------------------------------------------------------------  [FAIL] 0ms
ISUTEST - check ISUTEST inside unit test.--------------------------  [OK] 0ms

----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude...... [OK] 0ms
CHKCMDLN - check command line processing of %utt5------------------  [OK] 0ms
CHKGUI - check GUI processing of %utt5-----------------------------  [OK] 0ms
CKGUISET - check list of tests returned by GUISET------------------  [OK] 0ms
NEWSTYLE - test return of valid new style or @TEST indicators...---  [OK] 0ms

---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...------------------------------------  [OK] 0ms
COVCOV - - check COVCOV - remove seen lines......-----------------  [OK] 10ms
COVRPT...........-------------------------------------------------  [OK] 10ms
COVRPTLS - - coverage report returning text in global...........---  [OK] 0ms
TRIMDATA - - TRIMDATA in %utcover..--------------------------------  [OK] 0ms
LIST - - LIST in %utcover............-----------------------------  [OK] 20ms
CACHECOV - - set up routine for analysis in globals..-------------  [OK] 40ms
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............---------------------------------------------  [OK] 0ms
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........-----------------------  [OK] 0ms

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.

------------------- RUNNING VERBOSE^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut


----------------------------------- %utt1 -----------------------------------
T1 - - Make sure Start-up Ran.-----------------------------------------  [OK]
T2 - - Make sure Set-up runs.------------------------------------------  [OK]
T3 - - Make sure Teardown runs.----------------------------------------  [OK]
T4 - Entry point using XTMENT.-----------------------------------------  [OK]
T5 - Error count check
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.----------------------------------------------------------------------  [FAIL]
T6 - Succeed Entry Point...--------------------------------------------  [OK]
T7 - Make sure we write to principal even though we are on another device..[OK]
T8 - If IO starts with another device, write to that device as if it's the prici
pal device.------------------------------------------------------------  [OK]
COVRPTGL - coverage report returning global....------------------------  [OK]

----------------------------------- %utt2 -----------------------------------
T11 - An @TEST Entry point in Another Routine invoked through XTROU offsets.[OK]
T12 - An XTENT offset entry point in Another Routine invoked through XTROU offse
ts.--------------------------------------------------------------------  [OK]

----------------------------------- %utt3 -----------------------------------
T1 - Test 1.-----------------------------------------------------------  [OK]
T2 - Test 2.-----------------------------------------------------------  [OK]

----------------------------------- %utt4 -----------------------------------
MAIN - - Test coverage calculations------------------------------------  [OK]

----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.------------  [OK]
OLDSTYLE -  identify old style test indicator functionality..----------  [OK]
OLDSTYL1 -  identify old style test indicator 2.-----------------------  [OK]
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
-----------------------------------------------------------------------  [FAIL]
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-----------------------------------------------------------------------  [FAIL]
LEAKSOK - check leaks should be ok-------------------------------------  [OK]
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-----------------------------------------------------------------------  [FAIL]
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-----------------------------------------------------------------------  [FAIL]
ISUTEST - check ISUTEST inside unit test.------------------------------  [OK]

----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......---  [OK]
CHKCMDLN - check command line processing of %utt5----------------------  [OK]
CHKGUI - check GUI processing of %utt5---------------------------------  [OK]
CKGUISET - check list of tests returned by GUISET----------------------  [OK]
NEWSTYLE - test return of valid new style or @TEST indicators...-------  [OK]

---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...----------------------------------------  [OK]
COVCOV - - check COVCOV - remove seen lines......----------------------  [OK]
COVRPT...........------------------------------------------------------  [OK]
COVRPTLS - - coverage report returning text in global...........-------  [OK]
TRIMDATA - - TRIMDATA in %utcover..------------------------------------  [OK]
LIST - - LIST in %utcover............----------------------------------  [OK]
CACHECOV - - set up routine for analysis in globals..------------------  [OK]
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............-------------------------------------------------  [OK]
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........---------------------------  [OK]

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5


----------------------------------- %utt5 -----------------------------------
NEWSTYLE - identify new style test indicator functionality.------------  [OK]
OLDSTYLE -  identify old style test indicator functionality..----------  [OK]
OLDSTYL1 -  identify old style test indicator 2.-----------------------  [OK]
BADCHKEQ -  CHKEQ should fail on unequal value
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADCHKTF -  CHKTF should fail on false value
BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL
-----------------------------------------------------------------------  [FAIL]
BADERROR -  throws an error on purpose
BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found
-----------------------------------------------------------------------  [FAIL]
CALLFAIL -  called FAIL to test it
CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it
-----------------------------------------------------------------------  [FAIL]
LEAKSOK - check leaks should be ok-------------------------------------  [OK]
LEAKSBAD - check leaks with leak
LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X
-----------------------------------------------------------------------  [FAIL]
NVLDARG1 - check invalid arg in CHKEQ
NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
-----------------------------------------------------------------------  [FAIL]
ISUTEST - check ISUTEST inside unit test.------------------------------  [OK]

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr



---------------------------------- %uttcovr ----------------------------------
RTNANAL - - routine analysis...----------------------------------------  [OK]
COVCOV - - check COVCOV - remove seen lines......----------------------  [OK]
COVRPT...........------------------------------------------------------  [OK]
COVRPTLS - - coverage report returning text in global...........-------  [OK]
TRIMDATA - - TRIMDATA in %utcover..------------------------------------  [OK]
LIST - - LIST in %utcover............----------------------------------  [OK]
CACHECOV - - set up routine for analysis in globals..------------------  [OK]
LINEDATA - - convert code line to based on tags and offset, and identify active 
code lines............-------------------------------------------------  [OK]
TOTAGS - - convert from lines of code by line number to lines ordered by tag, li
ne from tag, and only not covered...........---------------------------  [OK]

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6



----------------------------------- %utt6 -----------------------------------
SETROUS - - generate array with indices of routines to exclude......---  [OK]
CHKCMDLN - check command line processing of %utt5----------------------  [OK]
CHKGUI - check GUI processing of %utt5---------------------------------  [OK]
CKGUISET - check list of tests returned by GUISET----------------------  [OK]
NEWSTYLE - test return of valid new style or @TEST indicators...-------  [OK]

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%ut -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%ut1 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%utcover -------------------
......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

------------------- RUNNING ^%utt1 -------------------

Running tests in NON-VERBOSE mode
For Verbose mode use DO VERBOSE^%utt1(ARG) where ARG is an integer 1 to 3
ENTER RETURN TO CONTINUE: ....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
.................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 6 Routines, 37 Entry Tags
Checked 109 tests, with 7 failures and encountered 1 error.

------------------- RUNNING ^%utt6 -------------------


RUNNING COMMAND LINE TESTS VIA DOSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


Running command line tests by RUNSET^%ut
....
T5^%utt1 - Error count check - This is an intentional failure.
.
T5^%utt1 - Error count check - Intentionally throwing a failure
...................
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
................................................................................

Ran 7 Routines, 39 Entry Tags
Checked 111 tests, with 7 failures and encountered 1 error.


RUNNING COMMAND LINE UNIT TESTS FOR %utt5
....
BADCHKEQ^%utt5 -  CHKEQ should fail on unequal value - <4> vs <3> - SET UNEQUAL 
ON PURPOSE - SHOULD FAIL

BADCHKTF^%utt5 -  CHKTF should fail on false value - SET FALSE (0) ON PURPOSE - 
SHOULD FAIL

BADERROR^%utt5 -  throws an error on purpose - Error: 150372778,BADERROR+6^%utt5
,%GTM-E-EXPR, Expression expected but not found

CALLFAIL^%utt5 -  called FAIL to test it - Called FAIL to test it

LEAKSBAD^%utt5 - check leaks with leak - LEAKSBAD TEST - X NOT SPECIFIED VARIABL
E LEAK: X

NVLDARG1^%utt5 - check invalid arg in CHKEQ - NO VALUES INPUT TO CHKEQ^%ut - no 
evaluation possible
.

Ran 1 Routine, 11 Entry Tags
Checked 10 tests, with 5 failures and encountered 1 error.


RUNNING UNIT TESTS FOR %utt5 VIA GUI CALLS - Silent


NOW RUNNING UNIT TESTS FOR %uttcovr

......................................................................

Ran 1 Routine, 9 Entry Tags
Checked 70 tests, with 0 failures and encountered 0 errors.

NOW RUNNING UNIT TESTS FOR %utt6

.........

Ran 1 Routine, 5 Entry Tags
Checked 9 tests, with 0 failures and encountered 0 errors.


------------ SUMMARY ------------
Ran 20 Routines, 122 Entry Tags
Checked 412 tests, with 14 failures and encountered 2 errors.


Routine %ut             (95.10%)   272 out of 286 lines covered
  - Detailed Breakdown
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut               (93.85%)   61 out of 65 lines covered
   the following is a list of the lines **NOT** covered
     EN1+72   . . . I $$GETSYS()=0 S %utStart=$P($NOW(),",",2)
     EN1+73   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utStart=$s(V>6.2:$ZH,1:
0)
     EN1+84   . . . I $$GETSYS()=0 S %utEnd=$P($NOW(),",",2) S %utElapsed=(%utEn
d-%utStart)*1000,%utElapsed=%utElapsed_"ms"
     EN1+85   . . . I $$GETSYS()=47 N V S V=$$GTMVER(0),%utEnd=$s(V>6.2:$ZH,1:0)
 S %utElapsed=$$ZHDIF(%utStart,%utEnd)
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered
   the following is a list of the lines **NOT** covered
     ZHDIF+1   N SC0 S SC0=$P(%ZH0,",",2)
     ZHDIF+2   N SC1 S SC1=$P(%ZH1,",",2)
     ZHDIF+3   N DC0 S DC0=$P(%ZH0,",")*86400
     ZHDIF+4   N DC1 S DC1=$P(%ZH1,",")*86400
     ZHDIF+5   N MCS0 S MCS0=$P(%ZH0,",",3)/1000000
     ZHDIF+6   N MCS1 S MCS1=$P(%ZH1,",",3)/1000000
     ZHDIF+8   N T0 S T0=SC0+DC0+MCS0
     ZHDIF+9   N T1 S T1=SC1+DC1+MCS1
     ZHDIF+11   N %ZH2 S %ZH2=T1-T0*1000
     ZHDIF+12   QUIT %ZH2_"ms"


Routine %ut1            (82.16%)   221 out of 269 lines covered
  - Detailed Breakdown
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
   the following is a list of the lines **NOT** covered
     CACHECOV+14   . . X "N %,%N S %N=0 X ""ZL @X F XCNP=XCNP+1:1 S %N=%N+1,%=$T
(+%N) Q:$L(%)=0  S @(DIF_XCNP_"""",0)"""")=%""" ; JLI see 160701 note in comment
s at top
     CACHECOV+15   . . Q
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
   the following is a list of the lines **NOT** covered
     COV+35   . N NMSP S NMSP=$G(NMSPS)
     COV+36   . D:NMSP]""  S NMSP="" F  S NMSP=$O(NMSPS(NMSP)) Q:NMSP=""  D
     COV+37   . . S NMSP1=NMSP I NMSP["*" S NMSP1=$P(NMSP,"*")
     COV+38   . . I $D(^$R(NMSP1)) S RTNS(NMSP1)=""
     COV+39   . . I NMSP["*" S RTN=NMSP1 F  S RTN=$O(^$R(RTN)) Q:RTN'[NMSP1  S R
TNS(RTN)=""
     COV+40   . . Q
     COV+41   . Q
     COV+52   . K ^TMP("%utCOVCOHORTSAV",$J)
     COV+53   . M ^TMP("%utCOVCOHORTSAV",$J)=^TMP("%utCOVCOHORT",$J)
     COV+54   . K ^TMP("%utCOVRESULT",$J)
     COV+55   . S ^TMP("%utcovrunning",$J)=1,%utcovxx=1
     COV+57   . I ($$GETSYS^%ut()=47) VIEW "TRACE":1:$NA(^TMP("%utCOVRESULT",$J)
)  ; GT.M START PROFILING
     COV+60   . . N NMSP,NMSPV S NMSP="",NMSPV="" F  S NMSPV=$O(RTNS(NMSPV)) Q:N
MSPV=""  S NMSP=NMSP_NMSPV_","
     COV+61   . . S NMSP=$E(NMSP,1,$L(NMSP)-1)
     COV+62   . . S STATUS=##class(%Monitor.System.LineByLine).Start($lb(NMSP),$
lb("RtnLine"),$lb($j))
     COV+63   . . I +STATUS'=1 D DecomposeStatus^%apiOBJ(STATUS,.ERR,"-d") F I=1
:1:ERR W ERR(I),!
     COV+64   . . I +STATUS'=1 K ERR S EXIT=1
     COV+65   . . Q
     COV+79   . I ($$GETSYS^%ut()=0) ; CACHE SPECIFIC
     COV+80   . K %utcovxx,^TMP("%utcovrunning",$J)
     COV+81   . Q
     COV+84   . I ($$GETSYS^%ut()=0) D  ; CACHE SPECIFIC CODE
     COV+85   . . S COVERSAV=$NA(^TMP("%utCOVCOHORTSAV",$J)) K @COVERSAV
     COV+86   . . S COVER=$NA(^TMP("%utCOVCOHORT",$J)) K @COVER
     COV+87   . . D CACHECOV(COVERSAV,COVER)
     COV+88   . . D TOTAGS(COVERSAV,0),TOTAGS(COVER,1)
     COV+89   . . D ##class(%Monitor.System.LineByLine).Stop()
     COV+90   . . Q
     COV+91   . D COVCOV($NA(^TMP("%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J
))) ; Venn diagram matching between globals
     COV+93   . I VERBOSITY=-1 D
     COV+94   . . K ^TMP("%utCOVREPORT",$J)
     COV+95   . . D COVRPTGL^%utcover($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("
%utCOVCOHORT",$J)),$NA(^TMP("%utCOVRESULT",$J)),$NA(^TMP("%utCOVREPORT",$J)))
     COV+96   . . Q
     COV+97   . E  D COVRPT($NA(^TMP("%utCOVCOHORTSAV",$J)),$NA(^TMP("%utCOVCOHO
RT",$J)),$NA(^TMP("%utCOVRESULT",$J)),VERBOSITY)
     COV+98   . Q
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1           (0.00%)   0 out of 11 lines covered
   the following is a list of the lines **NOT** covered
     GETVALS+2   N LINE,MORE,ROUNAME,RSET,VAL,X
     GETVALS+4   S RSET=##class(%ResultSet).%New("%Monitor.System.LineByLine:Res
ult")
     GETVALS+5   S ROUNAME=##class(%Monitor.System.LineByLine).GetRoutineName(RO
UNUM)
     GETVALS+6   S LINE=RSET.Execute(ROUNAME)
     GETVALS+7   F LINE=1:1 S MORE=RSET.Next() Q:'MORE  D
     GETVALS+8   . S X=RSET.GetData(1)
     GETVALS+9   . S VAL=$LI(X,MTRICNUM)
     GETVALS+10   . S @GLOB@(ROUNAME,LINE,"C")=+VAL ; values are 0 if not seen, 
otherwises positive number
     GETVALS+11   . Q
     GETVALS+12   D RSET.Close()
     GETVALS+13   Q
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Detailed Breakdown
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut             (95.10%)   272 out of 286 lines covered
  - Summary
 Tag %ut^%ut              (100.00%)   2 out of 2 lines covered
 Tag CHKEQ^%ut            (100.00%)   18 out of 18 lines covered
 Tag CHKLEAKS^%ut         (100.00%)   2 out of 2 lines covered
 Tag CHKTF^%ut            (100.00%)   15 out of 15 lines covered
 Tag COV^%ut              (100.00%)   2 out of 2 lines covered
 Tag COVERAGE^%ut         (100.00%)   2 out of 2 lines covered
 Tag DOSET^%ut            (100.00%)   6 out of 6 lines covered
 Tag EN^%ut               (100.00%)   6 out of 6 lines covered
 Tag EN1^%ut               (93.85%)   61 out of 65 lines covered
 Tag ERROR^%ut            (100.00%)   9 out of 9 lines covered
 Tag ERROR1^%ut           (100.00%)   9 out of 9 lines covered
 Tag FAIL^%ut             (100.00%)   2 out of 2 lines covered
 Tag GETLIST^%ut          (100.00%)   11 out of 11 lines covered
 Tag GETSET^%ut           (100.00%)   4 out of 4 lines covered
 Tag GETSYS^%ut           (100.00%)   3 out of 3 lines covered
 Tag GETUTVAL^%ut         (100.00%)   5 out of 5 lines covered
 Tag GTMVER^%ut           (100.00%)   1 out of 1 lines covered
 Tag GUILOAD^%ut          (100.00%)   8 out of 8 lines covered
 Tag GUINEXT^%ut          (100.00%)   43 out of 43 lines covered
 Tag GUISET^%ut           (100.00%)   8 out of 8 lines covered
 Tag ISUTEST^%ut          (100.00%)   1 out of 1 lines covered
 Tag LOAD^%ut             (100.00%)   10 out of 10 lines covered
 Tag LSTUTVAL^%ut         (100.00%)   4 out of 4 lines covered
 Tag MULTAPIS^%ut         (100.00%)   2 out of 2 lines covered
 Tag PICKSET^%ut          (100.00%)   3 out of 3 lines covered
 Tag RUNSET^%ut           (100.00%)   9 out of 9 lines covered
 Tag SETUT^%ut            (100.00%)   6 out of 6 lines covered
 Tag SUCCEED^%ut          (100.00%)   6 out of 6 lines covered
 Tag VERBOSE^%ut          (100.00%)   10 out of 10 lines covered
 Tag VERBOSE1^%ut         (100.00%)   4 out of 4 lines covered
 Tag ZHDIF^%ut              (0.00%)   0 out of 10 lines covered


Routine %ut1            (82.16%)   221 out of 269 lines covered
  - Summary
 Tag %ut1^%ut1            (100.00%)   2 out of 2 lines covered
 Tag ACTLINES^%ut1        (100.00%)   8 out of 8 lines covered
 Tag CACHECOV^%ut1         (88.24%)   15 out of 17 lines covered
 Tag CHECKTAG^%ut1        (100.00%)   10 out of 10 lines covered
 Tag CHEKTEST^%ut1        (100.00%)   9 out of 9 lines covered
 Tag COV^%ut1              (51.39%)   37 out of 72 lines covered
 Tag COVCOV^%ut1          (100.00%)   9 out of 9 lines covered
 Tag COVRPT^%ut1          (100.00%)   5 out of 5 lines covered
 Tag COVRPTLS^%ut1        (100.00%)   31 out of 31 lines covered
 Tag FAIL^%ut1            (100.00%)   12 out of 12 lines covered
 Tag GETTAG^%ut1          (100.00%)   4 out of 4 lines covered
 Tag GETTREE^%ut1         (100.00%)   7 out of 7 lines covered
 Tag GETVALS^%ut1           (0.00%)   0 out of 11 lines covered
 Tag ISUTEST^%ut1         (100.00%)   1 out of 1 lines covered
 Tag LINEDATA^%ut1        (100.00%)   9 out of 9 lines covered
 Tag NEWSTYLE^%ut1        (100.00%)   4 out of 4 lines covered
 Tag NVLDARG^%ut1         (100.00%)   11 out of 11 lines covered
 Tag RESETIO^%ut1         (100.00%)   2 out of 2 lines covered
 Tag RTNANAL^%ut1         (100.00%)   29 out of 29 lines covered
 Tag SETIO^%ut1           (100.00%)   2 out of 2 lines covered
 Tag TOTAGS^%ut1          (100.00%)   13 out of 13 lines covered
 Tag UP^%ut1              (100.00%)   1 out of 1 lines covered


Routine %utcover       (100.00%)   107 out of 107 lines covered
  - Summary
 Tag %utcover^%utcover    (100.00%)   2 out of 2 lines covered
 Tag CHKLEAKS^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVENTRY^%utcover    (100.00%)   15 out of 15 lines covered
 Tag COVERAGE^%utcover    (100.00%)   13 out of 13 lines covered
 Tag COVRPTGL^%utcover    (100.00%)   14 out of 14 lines covered
 Tag LIST^%utcover        (100.00%)   38 out of 38 lines covered
 Tag MULTAPIS^%utcover    (100.00%)   5 out of 5 lines covered
 Tag SETROUS^%utcover     (100.00%)   4 out of 4 lines covered
 Tag TRIMDATA^%utcover    (100.00%)   3 out of 3 lines covered


Routine %ut      (95.10%)   272 out of 286 lines covered
Routine %ut1      (82.16%)   221 out of 269 lines covered
Routine %utcover     (100.00%)   107 out of 107 lines covered


Overall Analysis 600 out of 662 lines covered (90% coverage)
OSEHRA>

